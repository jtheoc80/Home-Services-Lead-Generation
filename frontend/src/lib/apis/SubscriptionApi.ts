/* tslint:disable */
/* eslint-disable */
/**
 * LeadLedgerPro API
 * Home Services Lead Generation API with Supabase Authentication
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CancellationRequest,
  HTTPValidationError,
  ReactivationRequest,
} from '../models/index';
import {
    CancellationRequestFromJSON,
    CancellationRequestToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ReactivationRequestFromJSON,
    ReactivationRequestToJSON,
} from '../models/index';

export interface CancelSubscriptionApiSubscriptionCancelPostRequest {
    cancellationRequest: CancellationRequest;
}

export interface GetSubscriptionStatusApiSubscriptionStatusUserIdGetRequest {
    userId: string;
}

export interface ReactivateSubscriptionApiSubscriptionReactivatePostRequest {
    reactivationRequest: ReactivationRequest;
}

/**
 * 
 */
export class SubscriptionApi extends runtime.BaseAPI {

    /**
     * Cancel a user\'s subscription.
     * Cancel Subscription
     */
    async cancelSubscriptionApiSubscriptionCancelPostRaw(requestParameters: CancelSubscriptionApiSubscriptionCancelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['cancellationRequest'] == null) {
            throw new runtime.RequiredError(
                'cancellationRequest',
                'Required parameter "cancellationRequest" was null or undefined when calling cancelSubscriptionApiSubscriptionCancelPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/subscription/cancel`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CancellationRequestToJSON(requestParameters['cancellationRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Cancel a user\'s subscription.
     * Cancel Subscription
     */
    async cancelSubscriptionApiSubscriptionCancelPost(requestParameters: CancelSubscriptionApiSubscriptionCancelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.cancelSubscriptionApiSubscriptionCancelPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get subscription status for a user.
     * Get Subscription Status
     */
    async getSubscriptionStatusApiSubscriptionStatusUserIdGetRaw(requestParameters: GetSubscriptionStatusApiSubscriptionStatusUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getSubscriptionStatusApiSubscriptionStatusUserIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/subscription/status/{user_id}`;
        urlPath = urlPath.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get subscription status for a user.
     * Get Subscription Status
     */
    async getSubscriptionStatusApiSubscriptionStatusUserIdGet(requestParameters: GetSubscriptionStatusApiSubscriptionStatusUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getSubscriptionStatusApiSubscriptionStatusUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reactivate a user\'s subscription.
     * Reactivate Subscription
     */
    async reactivateSubscriptionApiSubscriptionReactivatePostRaw(requestParameters: ReactivateSubscriptionApiSubscriptionReactivatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['reactivationRequest'] == null) {
            throw new runtime.RequiredError(
                'reactivationRequest',
                'Required parameter "reactivationRequest" was null or undefined when calling reactivateSubscriptionApiSubscriptionReactivatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/subscription/reactivate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReactivationRequestToJSON(requestParameters['reactivationRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Reactivate a user\'s subscription.
     * Reactivate Subscription
     */
    async reactivateSubscriptionApiSubscriptionReactivatePost(requestParameters: ReactivateSubscriptionApiSubscriptionReactivatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.reactivateSubscriptionApiSubscriptionReactivatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
