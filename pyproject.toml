[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "leadledderpro"
version = "1.0.0"
description = "Automated building permit intelligence platform for contractors"
authors = ["LeadLedgerPro Team"]
license = "MIT"
readme = "README.md"
packages = [
    { include = "permit_leads" },
    { include = "backend" },
]

[tool.poetry.dependencies]
python = ">=3.10,<4.0"

# Web framework dependencies
fastapi = "^0.116.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
gunicorn = "^23.0.0"


# Data processing
pandas = ">=2.2,<3.0"
numpy = ">=1.26,<3.0"
scikit-learn = ">=1.5.0,<2.0.0"

# Database and ORM
psycopg2-binary = "^2.9.0"
supabase = "^2.6.0"

# Authentication and security
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
python-multipart = "^0.0.20"

# Environment and configuration
python-dotenv = "^1.1.1"

pydantic = "^2.0.0"
pydantic-settings = "^2.0.0"

# Scraping and web requests
requests = "*"
beautifulsoup4 = "*"
fake-useragent = "*"
tenacity = "*"

# Data utilities
pyyaml = "*"
sqlite-utils = "*"
python-dateutil = "*"

# Caching and performance
redis = {extras = ["async"], version = "^6.4.0"}

# Notifications
sendgrid = "^6.0.0"
twilio = "^7.0.0"

# Monitoring and metrics
prometheus-client = "^0.22.1"

# Payment processing
stripe = "^8.0.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.4.2"
pytest-cov = "^7.0.0"
pytest-asyncio = "^0.21.0"

# Code quality
ruff = "^0.13.2"
black = "^23.0.0"
mypy = "^1.0.0"

# OpenAPI and client generation
openapi-python-client = "^0.15.0"

[tool.poetry.group.test.dependencies]
# Additional test dependencies
httpx = "^0.25.0"
respx = "^0.20.0"

[tool.poetry.scripts]
leadledderpro = "permit_leads.__main__:main"
leadledderpro-backend = "backend.main:main"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11+
target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | node_modules
)/
'''

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "permit_leads/tests",
    "backend/tests",
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "asyncio: marks tests as requiring asyncio",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
exclude = [
    "build/",
    "dist/",
    "venv/",
    ".venv/",
]

[tool.coverage.run]
source = ["permit_leads", "backend"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]