name: Auto Resolve Conflicts

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request Number'
        required: true
        type: number
      strategy:
        description: 'Resolution Strategy'
        required: false
        default: 'safe'
        type: choice
        options:
          - safe
          - theirs-all
          - ours-all

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-resolve-conflicts:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request && 
       contains(github.event.comment.body, '/resolve') &&
       contains(fromJSON('["OWNER", "MEMBER"]'), github.event.comment.author_association)) ||
      github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Parse PR number from comment
        id: parse-pr
        run: |
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
            echo "strategy=safe" >> $GITHUB_OUTPUT
            
            # Check if strategy is specified in comment
            if echo "${{ github.event.comment.body }}" | grep -q "/resolve theirs-all"; then
              echo "strategy=theirs-all" >> $GITHUB_OUTPUT
            elif echo "${{ github.event.comment.body }}" | grep -q "/resolve ours-all"; then
              echo "strategy=ours-all" >> $GITHUB_OUTPUT
            fi
          else
            echo "pr_number=${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
            echo "strategy=${{ inputs.strategy }}" >> $GITHUB_OUTPUT
          fi

      - name: Get PR details
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ steps.parse-pr.outputs.pr_number }}
            });
            
            core.setOutput('base_ref', pr.base.ref);
            core.setOutput('head_ref', pr.head.ref);
            core.setOutput('head_sha', pr.head.sha);
            core.setOutput('mergeable', pr.mergeable);
            core.setOutput('mergeable_state', pr.mergeable_state);

      - name: Check if conflicts exist
        id: check-conflicts
        run: |
          if [ "${{ steps.pr-details.outputs.mergeable }}" = "false" ] && [ "${{ steps.pr-details.outputs.mergeable_state }}" = "dirty" ]; then
            echo "has_conflicts=true" >> $GITHUB_OUTPUT
          else
            echo "has_conflicts=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout repository
        if: steps.check-conflicts.outputs.has_conflicts == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        if: steps.check-conflicts.outputs.has_conflicts == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        if: steps.check-conflicts.outputs.has_conflicts == 'true'
        run: npm ci

      - name: Configure git
        if: steps.check-conflicts.outputs.has_conflicts == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Checkout head branch
        if: steps.check-conflicts.outputs.has_conflicts == 'true'
        run: |
          git checkout ${{ steps.pr-details.outputs.head_ref }}

      - name: Attempt merge and resolve conflicts
        if: steps.check-conflicts.outputs.has_conflicts == 'true'
        id: resolve-conflicts
        run: |
          set +e  # Don't exit on error
          
          echo "Attempting to merge origin/${{ steps.pr-details.outputs.base_ref }} into ${{ steps.pr-details.outputs.head_ref }}"
          
          # Attempt merge
          git merge origin/${{ steps.pr-details.outputs.base_ref }} --no-commit --no-ff
          merge_exit_code=$?
          
          if [ $merge_exit_code -eq 0 ]; then
            echo "merge_result=clean" >> $GITHUB_OUTPUT
            echo "No conflicts detected, committing merge"
            git commit -m "auto-merge: fast-forward from ${{ steps.pr-details.outputs.base_ref }}"
          else
            echo "merge_result=conflicts" >> $GITHUB_OUTPUT
            echo "Conflicts detected, running conflict resolution"
            
            # Run conflict resolution
            npm run bot:resolve -- --strategy "${{ steps.parse-pr.outputs.strategy }}"
            resolve_exit_code=$?
            
            if [ $resolve_exit_code -eq 0 ]; then
              echo "resolution_result=success" >> $GITHUB_OUTPUT
              git commit -m "auto-resolve: path-based resolution using ${{ steps.parse-pr.outputs.strategy }} strategy"
            elif [ $resolve_exit_code -eq 2 ]; then
              echo "resolution_result=partial" >> $GITHUB_OUTPUT
              # Get remaining conflicted files
              remaining_files=$(git diff --name-only --diff-filter=U || echo "")
              echo "remaining_files<<EOF" >> $GITHUB_OUTPUT
              echo "$remaining_files" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "resolution_result=failed" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      - name: Push changes
        if: |
          steps.check-conflicts.outputs.has_conflicts == 'true' && 
          (steps.resolve-conflicts.outputs.merge_result == 'clean' || 
           steps.resolve-conflicts.outputs.resolution_result == 'success')
        run: |
          git push origin ${{ steps.pr-details.outputs.head_ref }}

      - name: Run post-merge validation
        if: |
          steps.check-conflicts.outputs.has_conflicts == 'true' && 
          (steps.resolve-conflicts.outputs.merge_result == 'clean' || 
           steps.resolve-conflicts.outputs.resolution_result == 'success')
        id: validation
        run: |
          set +e  # Don't exit on error
          
          echo "Running post-merge validation..."
          npm ci && npm run build && npm run test
          validation_exit_code=$?
          
          if [ $validation_exit_code -ne 0 ]; then
            echo "validation_failed=true" >> $GITHUB_OUTPUT
            echo "Post-merge validation failed, reverting changes"
            
            # Revert the merge commit
            git reset --hard HEAD~1
            git push --force-with-lease origin ${{ steps.pr-details.outputs.head_ref }}
          else
            echo "validation_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR - Success
        if: |
          steps.check-conflicts.outputs.has_conflicts == 'true' && 
          (steps.resolve-conflicts.outputs.merge_result == 'clean' || 
           steps.resolve-conflicts.outputs.resolution_result == 'success') &&
          steps.validation.outputs.validation_failed != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const strategy = '${{ steps.parse-pr.outputs.strategy }}';
            const mergeResult = '${{ steps.resolve-conflicts.outputs.merge_result }}';
            
            const actor = (context.payload.comment && context.payload.comment.user && context.payload.comment.user.login)
              ? context.payload.comment.user.login
              : context.actor;
            
            let message = '🤖 **Auto-resolve completed successfully!**\n\n';
            
            if (mergeResult === 'clean') {
              message += '✅ **Result**: Clean fast-forward merge\n';
              message += '📋 **Files**: No conflicts detected\n';
            } else {
              message += '✅ **Result**: Conflicts resolved using path-based rules\n';
              message += `📋 **Strategy**: \`${strategy}\`\n`;
            }
            
            message += `🔧 **Validation**: Build and tests passed\n`;
            message += `\n_Triggered by: @${actor}_`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.parse-pr.outputs.pr_number }},
              body: message
            });

      - name: Comment on PR - Partial Resolution
        if: |
          steps.check-conflicts.outputs.has_conflicts == 'true' && 
          steps.resolve-conflicts.outputs.resolution_result == 'partial'
        uses: actions/github-script@v7
        with:
          script: |
            const strategy = '${{ steps.parse-pr.outputs.strategy }}';
            const remainingFiles = `${{ steps.resolve-conflicts.outputs.remaining_files }}`.split('\n').filter(f => f.trim());
            
            const actor = (context.payload.comment && context.payload.comment.user && context.payload.comment.user.login)
              ? context.payload.comment.user.login
              : context.actor;
            
            let message = '⚠️ **Auto-resolve partially completed**\n\n';
            message += `📋 **Strategy**: \`${strategy}\`\n`;
            message += `❌ **Remaining conflicts**: ${remainingFiles.length} files still need manual resolution\n\n`;
            
            if (remainingFiles.length > 0) {
              message += '**Files requiring manual resolution:**\n';
              remainingFiles.forEach(file => {
                message += `- \`${file}\`\n`;
              });
            }
            
            message += '\n💡 **Next steps**:\n';
            message += '- Resolve remaining conflicts manually\n';
            message += '- Or try a different strategy: `/resolve theirs-all` or `/resolve ours-all`\n';
            message += `\n_Triggered by: @${actor}_`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.parse-pr.outputs.pr_number }},
              body: message
            });

      - name: Comment on PR - Validation Failed
        if: |
          steps.check-conflicts.outputs.has_conflicts == 'true' && 
          steps.validation.outputs.validation_failed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const strategy = '${{ steps.parse-pr.outputs.strategy }}';
            
            const actor = (context.payload.comment && context.payload.comment.user && context.payload.comment.user.login)
              ? context.payload.comment.user.login
              : context.actor;
            
            let message = '❌ **Auto-resolve failed validation**\n\n';
            message += `📋 **Strategy**: \`${strategy}\`\n`;
            message += '✅ **Conflicts**: Successfully resolved\n';
            message += '❌ **Validation**: Build or tests failed after resolution\n';
            message += '🔄 **Action**: Changes have been reverted\n\n';
            message += '💡 **Next steps**:\n';
            message += '- Check build/test failures in the workflow logs\n';
            message += '- Resolve conflicts manually\n';
            message += '- Fix any breaking changes before merging\n';
            message += `\n_Triggered by: @${actor}_`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.parse-pr.outputs.pr_number }},
              body: message
            });

      - name: Comment on PR - No Conflicts
        if: steps.check-conflicts.outputs.has_conflicts == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const actor = (context.payload.comment && context.payload.comment.user && context.payload.comment.user.login)
              ? context.payload.comment.user.login
              : context.actor;
            
            let message = '✅ **No conflicts detected**\n\n';
            message += 'This pull request can be merged without conflicts.\n';
            message += `\n_Triggered by: @${actor}_`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.parse-pr.outputs.pr_number }},
              body: message
            });

      - name: Comment on PR - Access Denied
        if: |
          github.event_name == 'issue_comment' && 
          github.event.issue.pull_request && 
          contains(github.event.comment.body, '/resolve') &&
          !contains(fromJSON('["OWNER", "MEMBER"]'), github.event.comment.author_association)
        uses: actions/github-script@v7
        with:
          script: |
            const authorAssociation = context.payload.comment ? context.payload.comment.author_association : 'UNKNOWN';
            const actor = (context.payload.comment && context.payload.comment.user && context.payload.comment.user.login)
              ? context.payload.comment.user.login
              : context.actor;
            
            let message = '🚫 **Access Denied**\n\n';
            message += 'Only repository owners and members can trigger auto-resolve.\n';
            message += `Your association: \`${authorAssociation}\`\n`;
            message += `\n_Triggered by: @${actor}_`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.issue.number }},
              body: message
            });