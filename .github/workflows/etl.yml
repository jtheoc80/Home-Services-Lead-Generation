name: Nightly ETL

on:
  schedule:
    # hourly
    - cron: "0 * * * *"
  workflow_dispatch:
    inputs:
      since:
        description: "Time period to scrape (e.g., 1d, 2h, 30m)"
        required: false
        default: "1d"
      force:
        description: "Force run even with 0 records"
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.11"
  ETL_ALLOW_EMPTY: "1"

jobs:
  etl:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: permit_leads

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps
        run: |
          cd ..
          python -m pip install --upgrade pip
          if [ -f "poetry.lock" ]; then
            pipx install poetry
            poetry install --no-interaction --no-ansi
          elif [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            pip install -e .
          fi

      - name: Ensure output dirs
        run: |
          mkdir -p permit_leads/logs permit_leads/artifacts permit_leads/data

      - name: Preflight secrets
        id: preflight
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          ok=1
          for v in SUPABASE_URL SUPABASE_SERVICE_ROLE_KEY; do
            if [ -z "${!v}" ]; then
              echo "::error title=$v missing::Set it in GitHub → Settings → Secrets and variables → Actions"
              ok=0
            else
              echo "::add-mask::${!v}"
            fi
          done
          echo "ok=$ok" >> "$GITHUB_OUTPUT"
          [ "$ok" -eq 1 ]

      - name: Supabase REST probe
        if: ${{ steps.preflight.outputs.ok == '1' }}
        id: supa
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          code=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Prefer: count=exact, head=true" \
            "$SUPABASE_URL/rest/v1/leads?select=id&limit=1")
          echo "http_code=$code" >> "$GITHUB_OUTPUT"
          if [ "$code" != "200" ] && [ "$code" != "206" ]; then
            echo "::warning title=Supabase REST check failed::HTTP $code"
          fi

      - name: Run ETL scraping
        id: scrape
        env:
          HC_ISSUED_PERMITS_URL: ${{ secrets.HC_ISSUED_PERMITS_URL }}
        run: |
          # Resolve --since default in bash (cron-safe)
          SINCE="${{ inputs.since }}"
          [ -z "$SINCE" ] && SINCE="1d"
          echo "Running scrape: --since $SINCE"
          # We run poetry from repo root but write logs under permit_leads/
          cd ..
          set +e
          poetry run python -m permit_leads --since "$SINCE" --formats csv 2>&1 | tee permit_leads/logs/etl_output.log
          status=${PIPESTATUS[0]}
          set -e
          echo "status=$status" >> "$GITHUB_OUTPUT"

          # Count records defensively
          COUNT=$(grep -o "Processed [0-9]\+" permit_leads/logs/etl_output.log | tail -1 | grep -o "[0-9]\+" || echo 0)
          echo "record_count=$COUNT" >> "$GITHUB_OUTPUT"
          echo "Scrape produced $COUNT records (exit $status)"

      - name: Run data ingestion (only when records > 0 or force=true)
        id: etl_run
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          FORCE="${{ inputs.force }}"; [ -z "$FORCE" ] && FORCE="false"
          RECORDS="${{ steps.scrape.outputs.record_count }}"

          if [ "$RECORDS" -eq 0 ] && [ "$FORCE" != "true" ]; then
            echo "No records and force!=true → skipping ingestion."
            exit 0
          fi

          echo "Looking for CSVs under permit_leads/artifacts/ ..."
          shopt -s nullglob
          CSVs=( permit_leads/artifacts/*.csv )
          if [ ${#CSVs[@]} -eq 0 ]; then
            echo "::warning title=No CSV artifacts found::Skipping ingestion"
            exit 0
          fi

          echo "Ingesting ${#CSVs[@]} file(s)"
          cd ..
          cat > /tmp/ingest_script.py << 'EOF'
          import glob, sys
          sys.path.insert(0, 'backend')
          from app.ingest import ingest_csv_data
          files = glob.glob('permit_leads/artifacts/*.csv')
          ok = True
          for f in files:
              try:
                  print(f'Ingesting {f}')
                  ingest_csv_data(f)
              except Exception as e:
                  print(f'Ingestion failed for {f}: {e}')
                  ok = False
          print('DONE')
          sys.exit(0 if ok else 1)
          EOF
          poetry run python /tmp/ingest_script.py

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightly-etl-${{ github.run_id }}
          path: |
            artifacts/**/*.csv
            logs/**/*.log
            logs/etl_output.log
          if-no-files-found: warn
          retention-days: 14

      - name: Summary
        if: always()
        run: |
          TIME="${{ inputs.since }}"
          [ -z "$TIME" ] && TIME="1d"
          COUNT="${{ steps.scrape.outputs.record_count }}"
          SUPA="${{ steps.supa.outputs.http_code }}"

          echo "## Nightly ETL Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Time period: $TIME" >> $GITHUB_STEP_SUMMARY
          echo "- Records processed: ${COUNT:-0}" >> $GITHUB_STEP_SUMMARY
          echo "- Supabase REST probe: ${SUPA:-n/a}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f logs/etl_output.log ]; then
            echo "### Tail of etl_output.log" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -20 logs/etl_output.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
