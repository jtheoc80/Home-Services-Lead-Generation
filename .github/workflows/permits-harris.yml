name: Harris County Permit Scraper

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      days:
        description: 'Days to look back'
        required: false
        default: '1'
        type: string
      sample_data:
        description: 'Use sample data (for testing)'
        required: false
        default: false
        type: boolean

env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  SOURCE_URL: ${{ secrets.HC_ISSUED_PERMITS_URL != '' && secrets.HC_ISSUED_PERMITS_URL || secrets.SOURCE_URL }}

jobs:
  preflight:
    runs-on: ubuntu-latest
    outputs:
      preflight_status: ${{ steps.preflight.outputs.status }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Run preflight checks
      id: preflight
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        HC_ISSUED_PERMITS_URL: ${{ secrets.HC_ISSUED_PERMITS_URL }}
      run: |
        echo "🚀 Running preflight validation for Harris County permit scraper..."
        python scripts/workflow-preflight.py
        if [ $? -eq 0 ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "✅ Preflight checks passed"
        else
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "❌ Preflight checks failed"
          exit 1
        fi

  dryrun:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    defaults:
      run:
        working-directory: permit_leads

    needs: preflight

    
    env:
      ETL_ALLOW_EMPTY: 1
      SAMPLE_DATA: 1
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      SOURCE_URL: ${{ secrets.HC_ISSUED_PERMITS_URL || secrets.SOURCE_URL }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd ..
        python -m pip install --upgrade pip
        pip install -r permit_leads/requirements.txt
        
    - name: Create directories
      run: |
        cd ..
        mkdir -p data/permits/{raw,aggregate}
        
    - name: Run Harris County permit scraper (dry-run with sample data)
      run: |
        echo "🔧 Running dry-run with sample data and ETL_ALLOW_EMPTY=1"
        echo "Sample data mode: ${SAMPLE_DATA}"
        echo "ETL allow empty: ${ETL_ALLOW_EMPTY}"
        
        # Run with sample data for 1 day
        python -m permit_leads scrape --jurisdiction tx-harris --days 1 --formats csv sqlite jsonl --verbose
        SCRAPER_EXIT_CODE=$?
        if [ $SCRAPER_EXIT_CODE -ne 0 ]; then
          echo "::error::Harris County permit scraper failed with exit code $SCRAPER_EXIT_CODE"
        fi
        # Continue regardless of scraper result
        
        # Ensure artifacts are created even when empty
        [ -f ../scripts/ensure_artifacts.py ] && python ../scripts/ensure_artifacts.py || true
        
    - name: Upload ETL artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: etl-artifacts-${{ github.run_id }}
        path: |
          artifacts/**/*.csv
          logs/**/*.log
          logs/etl_output.log
        if-no-files-found: warn
        
    - name: Generate dryrun summary
      if: always()
      run: |
        echo "## 🧪 Harris County Permit Scraper - Dry Run Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Preflight Validation" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.preflight.outputs.preflight_status }}" = "success" ]; then
          echo "✅ **Preflight checks passed**: All required secrets validated and Supabase connectivity confirmed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Preflight checks failed**: Environment validation or connectivity issues detected" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🧪 Dry Run Results" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Dry run completed**: Sample data mode with ETL_ALLOW_EMPTY=1" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📚 Documentation" >> $GITHUB_STEP_SUMMARY
        echo "- [Workflow Secrets Configuration](docs/workflows-secrets.md)" >> $GITHUB_STEP_SUMMARY
        echo "- [Harris County Permits Endpoint](docs/harris-county-permits-endpoint.md)" >> $GITHUB_STEP_SUMMARY
        
    - name: Upload logs and data artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: harris-dryrun-logs-${{ github.run_number }}
        path: |
          ../logs/
          ../data/
          ../artifacts/
        retention-days: 7
      with:
        name: harris-dryrun-logs-${{ github.run_number }}
        path: |
          logs/
          data/
          artifacts/
        retention-days: 7
    
  scrape-harris-permits:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: permit_leads

    needs: preflight
    
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      SOURCE_URL: ${{ secrets.HC_ISSUED_PERMITS_URL || secrets.SOURCE_URL }}

    
    steps:
    - name: "Preflight: verify required secrets"
      id: preflight
      shell: bash
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        SOURCE_URL: ${{ secrets.HC_ISSUED_PERMITS_URL || secrets.SOURCE_URL }}
      run: |
        ok=1
        for v in SUPABASE_URL SUPABASE_SERVICE_ROLE_KEY SOURCE_URL; do
          val="${!v}"
          if [ -z "$val" ]; then
            echo "::error title=$v missing::Set $v in GitHub → Settings → Secrets and variables → Actions"
            ok=0
          else
            echo "::add-mask::$val"
          fi
        done
        echo "ok=$ok" >> "$GITHUB_OUTPUT"
        [ "$ok" -eq 1 ]

    - name: Checkout repository
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd ..
        python -m pip install --upgrade pip
        pip install -r permit_leads/requirements.txt
        
    - name: Create data directory
      run: |
        cd ..
        mkdir -p data/permits/{raw,aggregate}
        
    - name: Check for 24h zero results
      id: check_recent
      run: |
        # Check if we have any Harris County data from the last 24 hours
        YESTERDAY=$(date -d '1 day ago' +%Y-%m-%d)
        TODAY=$(date +%Y-%m-%d)
        
        RECENT_FILES=0
        if [ -d "../data/permits" ]; then
          RECENT_FILES=$(find ../data/permits -name "*harris*" -name "*${YESTERDAY}*" -o -name "*harris*" -name "*${TODAY}*" | wc -l)
        fi
        
        echo "recent_files=${RECENT_FILES}" >> $GITHUB_OUTPUT
        echo "Found ${RECENT_FILES} recent Harris County files"
        
    - name: Run Harris County permit scraper
      if: ${{ steps.preflight.outputs.ok == '1' }}
      id: scrape
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        SOURCE_URL: ${{ secrets.HC_ISSUED_PERMITS_URL || secrets.SOURCE_URL }}
      run: |
        DAYS="${{ inputs.days }}"
        [ -z "$DAYS" ] && DAYS="1"
        SAMPLE="${{ inputs.sample_data }}"
        [ -z "$SAMPLE" ] && SAMPLE="false"
        
        # Set SAMPLE_DATA using bash default pattern
        if [ "$SAMPLE" = "true" ]; then
          export SAMPLE_DATA=1
        else
          export SAMPLE_DATA=0
        fi
        
        echo "Scraping Harris County permits for the last ${DAYS} days..."
        echo "Sample data mode: ${SAMPLE_DATA}"
        python -m permit_leads scrape --jurisdiction tx-harris --days "${DAYS}" --formats csv sqlite jsonl --verbose
        
        # Count new permits from today's run
        TODAY=$(date +%Y-%m-%d)
        NEW_PERMITS=0
        
        # Check CSV files for permit count
        if [ -f "../data/permits/aggregate/permits_${TODAY}.csv" ]; then
          NEW_PERMITS=$(tail -n +2 "../data/permits/aggregate/permits_${TODAY}.csv" | wc -l)
        fi
        
        echo "new_permits=${NEW_PERMITS}" >> $GITHUB_OUTPUT
        echo "Found ${NEW_PERMITS} new permits today"
        
    - name: Fail if zero results for 24h
      if: steps.check_recent.outputs.recent_files == '0' && steps.scrape.outputs.new_permits == '0'
      run: |
        echo "❌ No Harris County permits found in the last 24 hours"
        echo "This may indicate a problem with the scraper or data source"
        exit 1
        
    - name: Commit and push data
      if: ${{ steps.scrape.outputs.new_permits != '0' }}
      run: |
        cd ..
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        TODAY=$(date +%Y-%m-%d)
        git commit -m "Update Harris County permit data for ${TODAY}" \
                    -m "${{ steps.scrape.outputs.new_permits }} permits processed" \
                    -m "Automated Harris County scrape"
        git push
        

    - name: Write job summary
      run: |

        echo "### scrape-harris-permits summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Supabase URL: $([ -n \"${{ secrets.SUPABASE_URL }}\" ] && echo ✅ Set || echo ❌ Not set)" >> $GITHUB_STEP_SUMMARY
        echo "- Supabase Service Key: $([ -n \"${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}\" ] && echo ✅ Set || echo ❌ Not set)" >> $GITHUB_STEP_SUMMARY
        echo "- HC Permits URL: $([ -n \"${{ secrets.HC_ISSUED_PERMITS_URL }}\" ] && echo ✅ Set || echo ❌ Not set)" >> $GITHUB_STEP_SUMMARY

        echo "## 🏠 Harris County Permit Scraping Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Preflight status
        echo "### 🚀 Preflight Validation" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.preflight.outputs.preflight_status }}" = "success" ]; then
          echo "✅ **Preflight checks passed**: All required secrets validated and Supabase connectivity confirmed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Preflight checks failed**: Environment validation or connectivity issues detected" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Scraping results
        echo "### 📊 Scraping Results" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.scrape.outputs.new_permits }}" -gt 0 ]; then
          echo "✅ **Success**: Found ${{ steps.scrape.outputs.new_permits }} new permits" >> $GITHUB_STEP_SUMMARY
          
          # Show latest data files
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 Files Updated:" >> $GITHUB_STEP_SUMMARY
          TODAY=$(date +%Y-%m-%d)
          find ../data \( -name "*${TODAY}*" -name "*harris*" \) -o \( -name "*${TODAY}*" -name "permits_*" \) | head -5 | while read file; do
            if [ -f "$file" ]; then
              SIZE=$(stat -c%s "$file" 2>/dev/null || echo "0")
              echo "- \`$file\` (${SIZE} bytes)" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Harris County permits processed**: ${{ steps.scrape.outputs.new_permits }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ **No new data**: No Harris County permits found" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check_recent.outputs.recent_files }}" -eq 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Warning**: No recent data found in last 24 hours" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 Technical Details" >> $GITHUB_STEP_SUMMARY
        echo "**Run Details:**" >> $GITHUB_STEP_SUMMARY
        echo "- Jurisdiction: Harris County (tx-harris)" >> $GITHUB_STEP_SUMMARY
        
        # Set days default using shell logic
        DAYS_DISPLAY="${{ inputs.days }}"
        [ -z "$DAYS_DISPLAY" ] && DAYS_DISPLAY="1"
        echo "- Days back: $DAYS_DISPLAY" >> $GITHUB_STEP_SUMMARY
        if [ "${SAMPLE_DATA}" = "1" ]; then
          echo "- Sample data: Yes" >> $GITHUB_STEP_SUMMARY
        else
          echo "- Sample data: No" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- Run time: $(date)" >> $GITHUB_STEP_SUMMARY
        
        # Environment status with detailed health info
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment Status:**" >> $GITHUB_STEP_SUMMARY
        if [ -n "${{ secrets.SUPABASE_URL }}" ]; then
          echo "- Supabase URL: ✅ Set and validated" >> $GITHUB_STEP_SUMMARY
        else
          echo "- Supabase URL: ❌ Not set" >> $GITHUB_STEP_SUMMARY
        fi
        if [ -n "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" ]; then
          echo "- Supabase Service Key: ✅ Set and authenticated" >> $GITHUB_STEP_SUMMARY
        else
          echo "- Supabase Service Key: ❌ Not set" >> $GITHUB_STEP_SUMMARY
        fi
        if [ -n "${{ secrets.HC_ISSUED_PERMITS_URL }}" ]; then
          echo "- HC Permits URL: ✅ Set and accessible" >> $GITHUB_STEP_SUMMARY
        else
          echo "- HC Permits URL: ❌ Not set" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Documentation links
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📚 Documentation" >> $GITHUB_STEP_SUMMARY
        echo "- [Workflow Secrets Configuration](docs/workflows-secrets.md)" >> $GITHUB_STEP_SUMMARY
        echo "- [Harris County Permits Endpoint](docs/harris-county-permits-endpoint.md)" >> $GITHUB_STEP_SUMMARY
        echo "- [Troubleshooting Guide](docs/workflows-secrets.md#troubleshooting)" >> $GITHUB_STEP_SUMMARY



    - name: Set date output
      id: set_date
      run: echo "date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
        
    - name: Upload ETL artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: etl-artifacts-${{ github.run_id }}
        path: |
          artifacts/**/*.csv
          logs/**/*.log
          logs/etl_output.log
        if-no-files-found: warn
        
    - name: Upload data artifacts
      if: ${{ steps.scrape.outputs.new_permits != '0' }}
      uses: actions/upload-artifact@v4
      with:
        name: harris-county-permits-${{ steps.set_date.outputs.date }}
        path: ../data/
        retention-days: 30