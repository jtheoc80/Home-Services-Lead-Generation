name: Harris County Permit Scraper

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      days:
        description: 'Days to look back'
        required: false
        default: '1'
        type: string
      sample_data:
        description: 'Use sample data (for testing)'
        required: false
        default: false
        type: boolean

env:
  SAMPLE_DATA: ${{ github.event.inputs.sample_data == 'true' && '1' || '0' }}
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  HC_ISSUED_PERMITS_URL: ${{ secrets.HC_ISSUED_PERMITS_URL }}

jobs:
  scrape-harris-permits:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r permit_leads/requirements.txt
        
    - name: Create data directory
      run: |
        mkdir -p data/permits/{raw,aggregate}
        
    - name: Check for 24h zero results
      id: check_recent
      run: |
        # Check if we have any Harris County data from the last 24 hours
        YESTERDAY=$(date -d '1 day ago' +%Y-%m-%d)
        TODAY=$(date +%Y-%m-%d)
        
        RECENT_FILES=0
        if [ -d "data/permits" ]; then
          RECENT_FILES=$(find data/permits -name "*harris*" -name "*${YESTERDAY}*" -o -name "*harris*" -name "*${TODAY}*" | wc -l)
        fi
        
        echo "recent_files=${RECENT_FILES}" >> $GITHUB_OUTPUT
        echo "Found ${RECENT_FILES} recent Harris County files"
        
    - name: Run Harris County permit scraper
      id: scrape
      run: |
        DAYS="${{ github.event.inputs.days || '1' }}"
        
        echo "Scraping Harris County permits for the last ${DAYS} days..."
        python -m permit_leads scrape --jurisdiction tx-harris --days "${DAYS}" --formats csv sqlite jsonl --verbose
        
        # Count new permits from today's run
        TODAY=$(date +%Y-%m-%d)
        NEW_PERMITS=0
        
        # Check CSV files for permit count
        if [ -f "data/permits/aggregate/permits_${TODAY}.csv" ]; then
          NEW_PERMITS=$(tail -n +2 "data/permits/aggregate/permits_${TODAY}.csv" | wc -l)
        fi
        
        echo "new_permits=${NEW_PERMITS}" >> $GITHUB_OUTPUT
        echo "Found ${NEW_PERMITS} new permits today"
        
    - name: Fail if zero results for 24h
      if: steps.check_recent.outputs.recent_files == '0' && steps.scrape.outputs.new_permits == '0'
      run: |
        echo "❌ No Harris County permits found in the last 24 hours"
        echo "This may indicate a problem with the scraper or data source"
        exit 1
        
    - name: Commit and push data
      if: steps.scrape.outputs.new_permits > 0
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add only data files
        git add data/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        # Create commit with summary
        TODAY=$(date +%Y-%m-%d)
        
        git commit -m "Update Harris County permit data for ${TODAY}

        - ${{ steps.scrape.outputs.new_permits }} permits processed
        - Automated Harris County scrape on $(date)
        - Source: Harris County ArcGIS Feature Server"
        
        git push
        
    - name: Generate summary
      if: always()
      run: |
        echo "## 🏠 Harris County Permit Scraping Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.scrape.outputs.new_permits }}" -gt 0 ]; then
          echo "✅ **Success**: Found ${{ steps.scrape.outputs.new_permits }} new permits" >> $GITHUB_STEP_SUMMARY
          
          # Show latest data files
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 Files Updated:" >> $GITHUB_STEP_SUMMARY
          TODAY=$(date +%Y-%m-%d)
          find data \( -name "*${TODAY}*" -name "*harris*" \) -o \( -name "*${TODAY}*" -name "permits_*" \) | head -5 | while read file; do
            if [ -f "$file" ]; then
              SIZE=$(stat -c%s "$file" 2>/dev/null || echo "0")
              echo "- \`$file\` (${SIZE} bytes)" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Harris County permits processed**: ${{ steps.scrape.outputs.new_permits }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ **No new data**: No Harris County permits found" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check_recent.outputs.recent_files }}" -eq 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Warning**: No recent data found in last 24 hours" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Run Details:**" >> $GITHUB_STEP_SUMMARY
        echo "- Jurisdiction: Harris County (tx-harris)" >> $GITHUB_STEP_SUMMARY
        echo "- Days back: ${{ github.event.inputs.days || '1' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Sample data: ${{ env.SAMPLE_DATA == '1' && 'Yes' || 'No' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- Run time: $(date)" >> $GITHUB_STEP_SUMMARY
        
        # Show environment status
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment Status:**" >> $GITHUB_STEP_SUMMARY
        echo "- Supabase URL: ${{ secrets.SUPABASE_URL != '' && '✅ Set' || '❌ Not set' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Supabase Service Key: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY != '' && '✅ Set' || '❌ Not set' }}" >> $GITHUB_STEP_SUMMARY
        echo "- HC Permits URL: ${{ secrets.HC_ISSUED_PERMITS_URL != '' && '✅ Set' || '❌ Not set' }}" >> $GITHUB_STEP_SUMMARY
        
    - name: Upload data artifacts
      if: steps.scrape.outputs.new_permits > 0
      uses: actions/upload-artifact@v4
      with:
    - name: Set date output
      id: set_date
      run: echo "date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT

    - name: Upload data artifacts
      if: steps.scrape.outputs.new_permits > 0
      uses: actions/upload-artifact@v4
      with:
        name: harris-county-permits-${{ steps.set_date.outputs.date }}
        path: data/
        retention-days: 30