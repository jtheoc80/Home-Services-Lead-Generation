name: Nightly Permit Scraper

on:
  schedule:
    - cron: "15 6 * * *"  # 06:15 UTC
  workflow_dispatch:
    inputs:
      days:
        description: "Days back"
        default: "1"
      sample_data:
        description: "Sample mode"
        type: choice
        options: ["false","true"]
        default: "false"

jobs:
  scrape-permits:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: permit_leads
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd ..
        pipx install poetry && poetry install --no-interaction --no-ansi
        
    - name: Ensure output dirs
      run: |
        mkdir -p logs artifacts data
        
    - name: Create data directory
      run: |
        cd ..
        mkdir -p data/permits/{raw,aggregate}
        
    - name: "Preflight: verify required secrets"
      id: preflight
      shell: bash
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        SOURCE_URL: ${{ secrets.HC_ISSUED_PERMITS_URL || secrets.DALLAS_PERMITS_URL || secrets.AUSTIN_PERMITS_URL || '' }}
      run: |
        ok=1
        for v in SUPABASE_URL SUPABASE_SERVICE_ROLE_KEY SOURCE_URL; do
          val="${!v}"
          if [ -z "$val" ]; then
            echo "::error title=$v missing::Set this in GitHub → Settings → Secrets and variables → Actions"
            ok=0
          else
            echo "::add-mask::$val"
          fi
        done
        echo "ok=$ok" >> "$GITHUB_OUTPUT"
        [ "$ok" -eq 1 ]
        
    - name: Run permit scraper
      run: |
        # Set defaults in bash for cron-safe execution
        DAYS="${{ inputs.days }}"
        [ -z "$DAYS" ] && DAYS="1"
        SAMPLE="${{ inputs.sample_data }}"
        [ -z "$SAMPLE" ] && SAMPLE="false"
        
        # Set sample data environment variable
        if [ "$SAMPLE" = "true" ]; then
          export SAMPLE_DATA=1
        else
          export SAMPLE_DATA=0
        fi
        
        echo "Running permit scraper for the last ${DAYS} days..."
        echo "Sample data mode: ${SAMPLE_DATA}"
        
        # Run scraper with bash variables
        python -m permit_leads --source city_of_houston --days "$DAYS" --formats csv sqlite jsonl
        
    - name: Check for new data
      id: check_data
      run: |
        # Check if any files were created today
        TODAY=$(date +%Y-%m-%d)
        NEW_FILES=$(find ../data -name "*${TODAY}*" -type f | wc -l)
        echo "new_files=${NEW_FILES}" >> $GITHUB_OUTPUT
        echo "Found ${NEW_FILES} new files for ${TODAY}"
        
    - name: Commit and push data
      if: steps.check_data.outputs.new_files > 0
      run: |
        cd ..
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add only data files
        git add data/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        # Create commit with summary
        TODAY=$(date +%Y-%m-%d)
        PERMIT_COUNT=$(find data -name "*${TODAY}*" -name "*.csv" -exec wc -l {} \; | awk '{sum+=$1} END {print sum-NR}' || echo "0")
        
        git commit -m "Update permit data for ${TODAY}
        
        - ${PERMIT_COUNT} permits processed
        - Files updated: $(find data -name "*${TODAY}*" -type f | wc -l)
        - Automated scrape on $(date)"
        
        git push
        
    - name: Generate summary
      if: always()
      run: |
        echo "## 📊 Scraping Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.check_data.outputs.new_files }}" -gt 0 ]; then
          echo "✅ **Success**: Found ${{ steps.check_data.outputs.new_files }} new files" >> $GITHUB_STEP_SUMMARY
          
          # Show latest data
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Latest Files Created:" >> $GITHUB_STEP_SUMMARY
          find ../data -name "$(date +%Y-%m-%d)*" -type f | head -5 | while read file; do
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
          done
          
          # Show permit counts if CSV exists
          if [ -f "../data/permits/aggregate/permits_$(date +%Y-%m-%d).csv" ]; then
            PERMIT_COUNT=$(tail -n +2 "../data/permits/aggregate/permits_$(date +%Y-%m-%d).csv" | wc -l)
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📋 **Permits processed today**: $PERMIT_COUNT" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "ℹ️ **No new data**: No permits found or no changes detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Run details:**" >> $GITHUB_STEP_SUMMARY
        
        # Set defaults using shell logic for summary
        DAYS="${{ inputs.days }}"
        [ -z "$DAYS" ] && DAYS="1"
        
        SAMPLE="${{ inputs.sample_data }}"
        [ -z "$SAMPLE" ] && SAMPLE="false"
        
        # Set sample data display using shell logic
        if [ "$SAMPLE" = "true" ]; then
          SAMPLE_DISPLAY="Yes"
        else
          SAMPLE_DISPLAY="No"
        fi
        
        echo "- Source: city_of_houston" >> $GITHUB_STEP_SUMMARY
        echo "- Days back: $DAYS" >> $GITHUB_STEP_SUMMARY
        echo "- Sample data: $SAMPLE_DISPLAY" >> $GITHUB_STEP_SUMMARY
        echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        
    - name: Upload ETL artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: etl-${{ github.run_id }}
        path: |
          artifacts/**/*.csv
          logs/**/*.log
          logs/etl_output.log
        if-no-files-found: warn
        retention-days: 14
        
    - name: Upload data artifacts
      if: steps.check_data.outputs.new_files > 0
      uses: actions/upload-artifact@v4
      with:
        name: permit-data-$(date +%Y-%m-%d)
        path: ../data/
        retention-days: 30