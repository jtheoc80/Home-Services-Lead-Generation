name: Reusable Python Scraper

on:
  workflow_call:
    inputs:
      name:
        description: "Scraper name/identifier"
        required: true
        type: string
      module:
        description: "Python module to run (e.g., permit_leads.harris.scrape)"
        required: true
        type: string
      entry_fallback:
        description: "Fallback script path if module fails"
        required: false
        type: string
        default: ""
      days:
        description: "Days back to scrape"
        required: false
        type: string
        default: "1"
      sample_data:
        description: "Use sample data mode"
        required: false
        type: string
        default: "false"
      artifacts_glob:
        description: "Additional artifacts to upload (glob pattern)"
        required: false
        type: string
        default: ""
    secrets:
      SUPABASE_URL:
        description: "Supabase project URL"
        required: true
      SUPABASE_SERVICE_ROLE_KEY:
        description: "Supabase service role key"
        required: true
      SOURCE_URL:
        description: "Source data URL"
        required: false

jobs:
  scrape:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: .

    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      SOURCE_URL: ${{ secrets.SOURCE_URL }}
      SAMPLE_DATA: ${{ inputs.sample_data == 'true' && '1' || '0' }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r permit_leads/requirements.txt
        
    - name: Create data directory
      run: |
        mkdir -p data/permits/{raw,aggregate}
        
    - name: Validate secrets
      run: |
        echo "🔍 Validating required secrets..."
        if [ -z "${{ secrets.SUPABASE_URL }}" ]; then
          echo "::error::SUPABASE_URL secret is required"
          exit 1
        fi
        if [ -z "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" ]; then
          echo "::error::SUPABASE_SERVICE_ROLE_KEY secret is required"
          exit 1
        fi
        echo "✅ Required secrets are present"
        
    - name: Run Python module
      id: run_module
      run: |
        echo "🚀 Running Python module: ${{ inputs.module }}"
        echo "📅 Days: ${{ inputs.days }}"
        echo "🧪 Sample data: ${{ inputs.sample_data }}"
        
        # Build module arguments
        module_args="--days ${{ inputs.days }}"
        if [ "${{ inputs.sample_data }}" = "true" ]; then
          module_args="$module_args --sample"
        fi
        
        # Try running the Python module first
        if python -m ${{ inputs.module }} $module_args; then
          echo "✅ Module ${{ inputs.module }} executed successfully"
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "⚠️ Module ${{ inputs.module }} failed or not found"
          echo "success=false" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true
        
    - name: Run fallback script
      if: steps.run_module.outputs.success != 'true' && inputs.entry_fallback != ''
      run: |
        echo "🔄 Running fallback script: ${{ inputs.entry_fallback }}"
        if [ -f "${{ inputs.entry_fallback }}" ]; then
          python "${{ inputs.entry_fallback }}" --days "${{ inputs.days }}"
        else
          echo "::error::Fallback script not found: ${{ inputs.entry_fallback }}"
          exit 1
        fi
        
    - name: Upload data artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.name }}-data-${{ github.run_number }}
        path: |
          data/
          logs/
        if-no-files-found: warn
        retention-days: 14
        
    - name: Upload additional artifacts
      if: inputs.artifacts_glob != '' && always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.name }}-extra-${{ github.run_number }}
        path: ${{ inputs.artifacts_glob }}
        if-no-files-found: warn
        retention-days: 7
        
    - name: Generate summary
      if: always()
      run: |
        echo "## 🐍 Python Scraper Summary: ${{ inputs.name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Module**: \`${{ inputs.module }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Days**: ${{ inputs.days }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Sample data**: ${{ inputs.sample_data }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Fallback**: \`${{ inputs.entry_fallback }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Execution" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.run_module.outputs.success }}" = "true" ]; then
          echo "✅ **Module execution**: Successful" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Module execution**: Failed (fallback used)" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📁 **Artifacts**: Available in workflow artifacts section" >> $GITHUB_STEP_SUMMARY