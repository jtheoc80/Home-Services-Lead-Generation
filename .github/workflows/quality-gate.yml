name: Quality Gate

on:
  pull_request:
    branches: ["main", "develop"]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  quality-gate:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Node.js dependencies
        run: npm ci

      - name: Check for formatting-only changes
        id: check-changes
        run: |
          # Get list of changed files
          git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD > changed_files.txt
          
          # Check if changes are only to Python or JS/TS files that could be formatting
          format_files=$(grep -E '\.(py|js|ts|tsx|jsx)$' changed_files.txt || true)
          
          if [ -z "$format_files" ]; then
            echo "formatting_only=false" >> $GITHUB_OUTPUT
          else
            echo "formatting_only=true" >> $GITHUB_OUTPUT
          fi
          
          echo "Changed files:"
          cat changed_files.txt

      - name: Run Python formatting checks
        id: python-format
        run: |
          echo "Running Black check..."
          if ! black --check . >/dev/null 2>&1; then
            echo "python_formatting_needed=true" >> $GITHUB_OUTPUT
            echo "Black formatting issues found"
          else
            echo "python_formatting_needed=false" >> $GITHUB_OUTPUT
            echo "Black formatting OK"
          fi
          
          echo "Running Ruff check..."
          if ! ruff check . >/dev/null 2>&1; then
            echo "python_lint_needed=true" >> $GITHUB_OUTPUT
            echo "Ruff linting issues found"
          else
            echo "python_lint_needed=false" >> $GITHUB_OUTPUT
            echo "Ruff linting OK"
          fi

      - name: Run Node.js linting and type checking
        id: node-checks
        run: |
          echo "Running ESLint..."
          if ! npm run lint 2>&1; then
            echo "lint_issues=true" >> $GITHUB_OUTPUT
          else
            echo "lint_issues=false" >> $GITHUB_OUTPUT
          fi

          echo "Running TypeScript type check..."
          if ! npm run typecheck 2>&1; then
            echo "type_issues=true" >> $GITHUB_OUTPUT
            echo "TypeScript issues found"
          else
            echo "type_issues=false" >> $GITHUB_OUTPUT
            echo "TypeScript OK"
          fi

# Ensure Node 20 for JS steps
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # ---------- Node.js tests ----------
      - name: Detect JS tests
        id: detect_js
        shell: bash
        run: |
          set -Eeuo pipefail
          count=$(git ls-files '**/*.test.ts' '**/*.spec.ts' '**/*.test.js' '**/*.spec.js' | wc -l | tr -d ' ')
          echo "count=$count" >> "$GITHUB_OUTPUT"

      - name: Run Node.js tests (Vitest/Jest)
        id: node_tests
        if: ${{ steps.detect_js.outputs.count != '0' }}
        run: |
          set -Eeuo pipefail
          mkdir -p reports
          # Prefer Vitest, fall back to Jest
          if npx --yes vitest --version >/dev/null 2>&1; then
            npx vitest run --reporter=dot || echo "vitest_failed=true" >> $GITHUB_OUTPUT
          else
            npx jest --ci --runInBand --passWithNoTests --reporters=default || echo "jest_failed=true" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Mark Node.js test result
        id: node_mark
        run: |
          set -Eeuo pipefail
          failed="${{ steps.node_tests.outputs.vitest_failed == 'true' || steps.node_tests.outputs.jest_failed == 'true' }}"
          echo "failed=$failed" >> "$GITHUB_OUTPUT"

      # ---------- Python tests ----------
      - uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python deps (if present)
        run: |
          set -Eeuo pipefail
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f permit_leads/requirements.txt ]; then pip install -r permit_leads/requirements.txt; fi
          pip install pytest ruff black pytest-cov

      - name: Detect Py tests
        id: detect_py
        shell: bash
        run: |
          set -Eeuo pipefail
          count=$(git ls-files '**/test_*.py' '**/*_test.py' | wc -l | tr -d ' ')
          echo "count=$count" >> "$GITHUB_OUTPUT"

      - name: Run Pytests
        id: py_tests
        if: ${{ steps.detect_py.outputs.count != '0' }}
        run: |
          set -Eeuo pipefail
          pytest -q || echo "pytest_failed=true" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Mark Python test result
        id: py_mark
        run: |
          set -Eeuo pipefail
          failed="${{ steps.py_tests.outputs.pytest_failed == 'true' }}"
          echo "failed=$failed" >> "$GITHUB_OUTPUT"

      - name: Upload coverage reports
        if: always()
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

      - name: Set autofix output
        id: set-autofix
        run: |
          formatting_only="${{ steps.check-changes.outputs.formatting_only }}"
          python_formatting_needed="${{ steps.python-format.outputs.python_formatting_needed }}"
          python_lint_needed="${{ steps.python-format.outputs.python_lint_needed }}"
          lint_issues="${{ steps.node-checks.outputs.lint_issues }}"
          if [ "$formatting_only" == "true" ] && { [ "$python_formatting_needed" == "true" ] || [ "$python_lint_needed" == "true" ] || [ "$lint_issues" == "true" ]; }; then
            echo "should_autofix=true" >> $GITHUB_OUTPUT
          else
            echo "should_autofix=false" >> $GITHUB_OUTPUT
          fi

      - name: Auto-fix formatting issues (bot branch)
        if: steps.set-autofix.outputs.should_autofix == 'true'
        run: |
          # Create a new branch for auto-fixes
          fix_branch="autofix/formatting-$(date +%s)"
          git checkout -b "$fix_branch"
          
          # Apply Python formatting fixes
          if [ "${{ steps.python-format.outputs.python_formatting_needed }}" == "true" ]; then
            echo "Applying Python formatting fixes..."
            black . || true
          fi
          
          if [ "${{ steps.python-format.outputs.python_lint_needed }}" == "true" ]; then
            echo "Applying Python lint fixes..."
            ruff check --fix . || true
          fi
          
          # Apply JavaScript/TypeScript formatting fixes  
          if [ "${{ steps.node-checks.outputs.lint_issues }}" == "true" ]; then
            echo "Applying Node.js formatting fixes..."
            # Only fix auto-fixable rules, don't fail on others
            cd frontend && npx eslint . --fix --ext .js,.jsx,.ts,.tsx || true
            cd ..
          fi
          
          # Check if there are any changes
          if ! git diff --quiet; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add .
            git commit -m "Auto-fix: Apply formatting fixes
            
            - Applied Black formatting to Python files
            - Applied Ruff auto-fixes to Python files  
            - Applied ESLint auto-fixes to JS/TS files
            
            Co-authored-by: ${{ github.event.pull_request.user.login }} <${{ github.event.pull_request.user.login }}@users.noreply.github.com>"
            
            git push origin "$fix_branch"
            
            # Create a comment on the PR
            cat > comment.md << EOF
          ü§ñ **Auto-formatting fixes available**
          
          I've detected that this PR contains formatting issues that can be automatically fixed. 
          
          I've created a branch \`$fix_branch\` with the following fixes applied:
          - Black formatting for Python files
          - Ruff auto-fixes for Python files
          - ESLint auto-fixes for JavaScript/TypeScript files
          
          You can merge these changes by running:
          \`\`\`bash
          git fetch origin $fix_branch
          git merge origin/$fix_branch
          \`\`\`
          
          Or create a new PR from the fix branch.
          EOF
            
            gh pr comment ${{ github.event.pull_request.number }} --body-file comment.md
          else
            echo "No formatting changes needed after running auto-fix tools."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ---------- Quality Gate Summary ----------
      - name: Quality Gate Summary
        run: |
          echo "### Quality Gate" >> $GITHUB_STEP_SUMMARY
          echo "- JS tests found:  ${{ steps.detect_js.outputs.count }}" >> $GITHUB_STEP_SUMMARY
          echo "- JS tests failed: ${{ steps.node_mark.outputs.failed }}" >> $GITHUB_STEP_SUMMARY
          echo "- Py tests found:  ${{ steps.detect_py.outputs.count }}" >> $GITHUB_STEP_SUMMARY
          echo "- Py tests failed: ${{ steps.py_mark.outputs.failed }}" >> $GITHUB_STEP_SUMMARY

      # ---------- Block merge on failures (configurable) ----------
      - name: Block merge on test failures
        if: >
          (vars.REQUIRE_TESTS == 'true') &&
          (steps.node_mark.outputs.failed == 'true' || steps.py_mark.outputs.failed == 'true')
        run: |
          echo "‚ùå Tests failed. Blocking merge."
          exit 1

      - name: Block merge on critical linting issues
        if: steps.node-checks.outputs.type_issues == 'true'
        run: |
          echo "‚ùå TypeScript type errors found. Blocking merge."
          exit 1