name: ETL â€” Houston (on-demand)

on:
  workflow_dispatch:
    inputs:
      days:
        description: "Lookback window in days"
        required: false
        default: "14"

jobs:
  houston:
    runs-on: [self-hosted, linux, x64, scrape]  # <-- uses your new runner
    concurrency:
      group: etl-houston
      cancel-in-progress: false

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - run: npm ci


      - name: Sanity check required env
        run: |
          set -euo pipefail
          missing=0
          for v in SUPABASE_URL SUPABASE_SERVICE_ROLE_KEY USER_AGENT; do
            if [ -z "${!v:-}" ]; then echo "MISSING $v"; missing=1; fi
          done
          # Add city-specific vars below (uncomment what applies)
          # Dallas
          # for v in DALLAS_ARCGIS_URL; do [ -z "${!v:-}" ] && echo "MISSING $v" && missing=1; done
          # Austin
          # for v in AUSTIN_SODA_APP_TOKEN AUSTIN_DATASET_ID; do [ -z "${!v:-}" ] && echo "MISSING $v" && missing=1; done
          # San Antonio
          # for v in SANANTONIO_SODA_APP_TOKEN SAN_ANTONIO_DATASET_ID; do [ -z "${!v:-}" ] && echo "MISSING $v" && missing=1; done
          # Houston
          for v in HOUSTON_WEEKLY_XLSX_URL HOUSTON_SOLD_PERMITS_URL; do [ -z "${!v:-}" ] && echo "MISSING $v" && missing=1; done
          exit $missing
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          USER_AGENT: ${{ secrets.USER_AGENT }}
          HOUSTON_WEEKLY_XLSX_URL: ${{ secrets.HOUSTON_WEEKLY_URL }}
          HOUSTON_SOLD_PERMITS_URL: ${{ secrets.HOUSTON_SOLD_URL }}

      - name: Create output directories
        run: |
          mkdir -p logs artifacts

      # Install browsers + OS deps (works with yum/dnf on Amazon Linux 2023)
      - run: npx playwright install --with-deps chromium

      - name: Preflight connectivity (Houston)

        run: |
          set -euxo pipefail
          # Un-comment the checks you need. We print only the status line.
          # Dallas ArcGIS:
          # curl -sS --get "${DALLAS_ARCGIS_URL}" \
          #   --data-urlencode 'where=1=1' \
          #   --data-urlencode 'outFields=*' \
          #   --data-urlencode 'resultRecordCount=1' \
          #   --data-urlencode 'f=json' | head -c 200 | tr -d '\n' && echo

          # Austin Socrata:
          # curl -sS -H "X-App-Token: ${AUSTIN_SODA_APP_TOKEN}" \
          #   "https://data.austintexas.gov/resource/${AUSTIN_DATASET_ID}.json?\$limit=1" | head -c 200 | tr -d '\n' && echo

          # San Antonio Socrata:
          # curl -sS -H "X-App-Token: ${SANANTONIO_SODA_APP_TOKEN}" \
          #   "https://data.sanantonio.gov/resource/${SAN_ANTONIO_DATASET_ID}.json?\$limit=1" | head -c 200 | tr -d '\n' && echo

          # Houston weekly/sold landing pages:
          curl -sS -I "${HOUSTON_WEEKLY_XLSX_URL}" | head -n1
          curl -sS -I "${HOUSTON_SOLD_PERMITS_URL}" | head -n1
        env:
          HOUSTON_WEEKLY_XLSX_URL: ${{ secrets.HOUSTON_WEEKLY_URL }}
          HOUSTON_SOLD_PERMITS_URL: ${{ secrets.HOUSTON_SOLD_URL }}

      # Download the XLSX (weekly or sold)
      - name: Houston weekly download
        env:
          HOUSTON_WEEKLY_URL: ${{ secrets.HOUSTON_WEEKLY_URL }}
          HOUSTON_SOLD_URL:   ${{ secrets.HOUSTON_SOLD_URL }}
          USER_AGENT:         ${{ secrets.USER_AGENT }}
          OUT_DIR:            artifacts/houston
        run: npx tsx scripts/houston_download.ts weekly

      # (Optional) upload file as artifact for debugging
      - uses: actions/upload-artifact@v4
        with:
          name: houston-xlsx
          path: artifacts/houston/*.xls*
          if-no-files-found: error

      - name: Run Houston ETL
        env:
          SUPABASE_URL:                 ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY:    ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          HOUSTON_WEEKLY_XLSX_URL:      ${{ secrets.HOUSTON_WEEKLY_URL }}
          HOUSTON_SOLD_PERMITS_URL:     ${{ secrets.HOUSTON_SOLD_URL }}
          USER_AGENT:                   ${{ secrets.USER_AGENT }}
          # Turn off the "allow empty" mode if you want the job to fail on no data:
          ETL_ALLOW_EMPTY:              "0"
          DAYS:                         ${{ github.event.inputs.days }}
        run: |
          # Use the existing Houston ETL scripts
          npx tsx scripts/ingest-coh.ts 2>&1 | tee logs/etl_output.log

      - name: Upload ETL logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: etl-logs-${{ github.job }}-${{ github.run_id }}
          path: |
            logs/**/*.log
            artifacts/**/*
          if-no-files-found: warn

      - name: Summarize run output
        if: always()
        run: |
          echo "Job finished on $(hostname)"