name: Stack Monitor

on:
  schedule:
    # Run every 10 minutes
    - cron: "*/10 * * * *"
  workflow_dispatch:
    inputs:
      force_remediation:
        description: 'Force auto-remediation even if disabled'
        type: boolean
        default: false

env:
  NODE_VERSION: '20'

jobs:
  stack-health-check:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      issues: write
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run stack health check
        id: health_check
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          AUTO_REMEDIATE: ${{ vars.AUTO_REMEDIATE || 'false' }}
        run: |
          # Run health check and capture output
          node scripts/stack-health.js > summary.md || true
          
          # Read exit code from file (more reliable than $?)
          if [ -f ".stack-health-exit-code" ]; then
            EXIT_CODE=$(cat .stack-health-exit-code)
            echo "health_check_failed=$EXIT_CODE" >> $GITHUB_OUTPUT
          else
            echo "health_check_failed=1" >> $GITHUB_OUTPUT
          fi
          
          # Always append summary to GitHub Step Summary
          if [ -f "summary.md" ]; then
            cat summary.md >> $GITHUB_STEP_SUMMARY
          fi
        
      - name: Upload stack health artifacts
        if: steps.health_check.outputs.health_check_failed != '0'
        uses: actions/upload-artifact@v4
        with:
          name: stack-health-report-${{ github.run_number }}
          path: |
            stack-health.json
            summary.md
            .stack-health-exit-code
          retention-days: 30
          if-no-files-found: warn
          
      - name: Create or update GitHub issue
        if: steps.health_check.outputs.health_check_failed != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the generated summary
            let summary = '## Stack Monitor Alert\n\nStack health check failed. Please review the details below.\n\n';
            if (fs.existsSync('summary.md')) {
              summary = fs.readFileSync('summary.md', 'utf8');
            }
            
            // Add metadata
            const metadata = `
            
            ---
            
            **Run Details:**
            - **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - **Triggered by:** ${{ github.event_name }}
            - **Timestamp:** ${new Date().toISOString()}
            - **Branch:** ${{ github.ref_name }}
            - **Commit:** ${{ github.sha }}
            
            *This issue was automatically generated by the Stack Monitor workflow.*
            `;
            
            const title = 'Stack Monitor Alert';
            const body = summary + metadata;
            
            // Search for existing issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'created',
              direction: 'desc'
            });
            
            const existingIssue = issues.find(issue => 
              issue.title === title && 
              issue.user.type === 'Bot'
            );
            
            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: body,
                labels: ['bug', 'infrastructure', 'automated']
              });
              
              // Add comment with latest update
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `### 🔄 Stack Monitor Update\n\n**Run #${{ github.run_number }}** detected continued issues.\n\nSee updated issue description for latest details.`
              });
              
              console.log(`Updated existing issue #${existingIssue.number}`);
            } else {
              // Create new issue
              const { data: issue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['bug', 'infrastructure', 'automated']
              });
              
              console.log(`Created new issue #${issue.number}`);
            }
            
      - name: Auto-remediation (if enabled)
        if: |
          steps.health_check.outputs.health_check_failed != '0' && 
          (vars.AUTO_REMEDIATE == 'true' || github.event.inputs.force_remediation == 'true')
        run: |
          echo "🔧 Auto-remediation is enabled, attempting to fix issues..."
          
          # Check if remediation scripts exist and run them
          if [ -f "scripts/remediate-vercel.js" ]; then
            echo "Running Vercel remediation..."
            node scripts/remediate-vercel.js || echo "Vercel remediation failed"
          fi
          
          if [ -f "scripts/remediate-railway.js" ]; then
            echo "Running Railway remediation..."
            node scripts/remediate-railway.js || echo "Railway remediation failed"
          fi
          
          if [ -f "scripts/remediate-supabase.js" ]; then
            echo "Running Supabase remediation..."
            node scripts/remediate-supabase.js || echo "Supabase remediation failed"
          fi
          
          # Wait a bit and re-run health check to see if issues were resolved
          echo "Waiting 30 seconds before re-checking..."
          sleep 30
          
          echo "Re-running health check after remediation..."
          node scripts/stack-health.js > remediation-summary.md || true
          
          if [ -f "remediation-summary.md" ]; then
            echo "## Post-Remediation Results" >> $GITHUB_STEP_SUMMARY
            cat remediation-summary.md >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Close resolved issues
        if: steps.health_check.outputs.health_check_failed == '0'
        uses: actions/github-script@v7
        with:
          script: |
            const title = 'Stack Monitor Alert';
            
            // Search for open Stack Monitor issues
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              creator: 'app/github-actions',
              sort: 'created',
              direction: 'desc'
            });
            
            const stackIssues = issues.filter(issue => 
              issue.title === title && 
              issue.user.type === 'Bot'
            );
            
            for (const issue of stackIssues) {
              // Add resolution comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `### ✅ Issue Resolved\n\n**Run #${{ github.run_number }}** confirmed all services are healthy.\n\nClosing this issue automatically.`
              });
              
              // Close the issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed',
                state_reason: 'completed'
              });
              
              console.log(`Closed resolved issue #${issue.number}`);
            }
            
      - name: Report workflow summary
        if: always()
        run: |
          echo "## Stack Monitor Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node Version:** ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check Result:** ${{ steps.health_check.outputs.health_check_failed == '0' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Auto-remediation:** ${{ vars.AUTO_REMEDIATE == 'true' && '✅ Enabled' || '❌ Disabled' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY