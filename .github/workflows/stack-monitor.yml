name: Stack Monitor

on:
  # Run every hour
  schedule:
    - cron: '0 * * * *'
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      force_fix:
        description: 'Force trigger AI Auto PR even if no issues detected'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  actions: write

jobs:
  stack-health-check:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      issues: write
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm ci

      - name: Run stack health check
        id: health_check
        run: |
          echo "Running stack health monitor..."

          # Make script executable
          chmod +x scripts/stack-health.js

          # Capture the output and exit code
          set +e  # Don't exit on error
          OUTPUT=$(node scripts/stack-health.js 2>&1)
          EXIT_CODE=$?
          set -e  # Re-enable exit on error

          echo "Exit code: $EXIT_CODE"
          echo "Output:"
          echo "$OUTPUT"

          # Extract fix instruction if present
          FIX_INSTRUCTION=""
          if echo "$OUTPUT" | grep -q "---FIX-INSTRUCTION---"; then
            FIX_INSTRUCTION=$(echo "$OUTPUT" | \
              sed -n '/---FIX-INSTRUCTION---/,/---END-FIX-INSTRUCTION---/p' | \
              sed '1d;$d')
          fi

          # Set outputs for next step
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
          has_issues=$([[ $EXIT_CODE -ne 0 ]] && echo 'true' || echo 'false')
          echo "has_issues=$has_issues" >> $GITHUB_OUTPUT

          # Handle multiline instruction
          if [ -n "$FIX_INSTRUCTION" ]; then
            echo "fix_instruction<<EOF" >> $GITHUB_OUTPUT
            echo "$FIX_INSTRUCTION" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "fix_instruction=" >> $GITHUB_OUTPUT
          fi

          # Determine error type based on exit code and output patterns
          ERROR_TYPE="unknown"
          case $EXIT_CODE in
            0) ERROR_TYPE="none" ;;
            1) ERROR_TYPE="environment" ;;
            2) ERROR_TYPE="build" ;;
            3) ERROR_TYPE="supabase" ;;
            4) ERROR_TYPE="health" ;;
            5) ERROR_TYPE="railway" ;;
            *) ERROR_TYPE="unknown" ;;
          esac
          
          # Check for specific code/config issue patterns
          if echo "$OUTPUT" | grep -q "supabaseKey is required\|NEXT_PUBLIC_.*missing\|port not bound"; then
            ERROR_TYPE="code_config"
            echo "Detected code/config issues requiring specific AI Auto PR instruction"
          fi
          
          echo "error_type=$ERROR_TYPE" >> $GITHUB_OUTPUT

      - name: Trigger AI Auto PR on code/config issues
        if: >
          (steps.health_check.outputs.error_type == 'code_config' && steps.health_check.outputs.has_issues == 'true') ||
          github.event.inputs.force_fix == 'true'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: stack-health-fix
          client-payload: |
            {
              "instruction": "${{ steps.health_check.outputs.fix_instruction }}",
              "error_type": "${{ steps.health_check.outputs.error_type }}",
              "exit_code": "${{ steps.health_check.outputs.exit_code }}",
              "triggered_by": "stack-monitor",
              "workflow_run_id": "${{ github.run_id }}",
              "issue_type": "code_config"
            }

      - name: Report status
        run: |
          echo "Stack health check completed"
          echo "Has issues: ${{ steps.health_check.outputs.has_issues }}"
          echo "Error type: ${{ steps.health_check.outputs.error_type }}"

          if [ "${{ steps.health_check.outputs.has_issues }}" == "true" ]; then
            fix_instruction="${{ steps.health_check.outputs.fix_instruction }}"
            echo "Fix instruction: $fix_instruction"
            
            if [ "${{ steps.health_check.outputs.error_type }}" == "code_config" ]; then
              echo "üö® Code/config issues detected - AI Auto PR workflow triggered with specific instruction"
            else
              echo "‚ö†Ô∏è  Issues detected but not triggering AI Auto PR (not code/config related)"
            fi
          else
            echo "‚úÖ No issues detected - stack is healthy"
          fi