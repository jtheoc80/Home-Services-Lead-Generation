name: OpenAPI Validation and Client Generation

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'openapi.yaml'
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'openapi.yaml'

jobs:
  validate-openapi:
    name: Validate OpenAPI Specification
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install OpenAPI validation tools
      run: |
        npm install -g @apidevtools/swagger-parser
        npm install -g @redocly/cli
        
    - name: Validate OpenAPI spec syntax
      run: |
        swagger-parser validate openapi.yaml
        
    - name: Lint OpenAPI spec with Redocly
      run: |
        redocly lint openapi.yaml
        
    - name: Check if API changed without spec update
      if: github.event_name == 'pull_request'
      run: |
        # Check if backend files changed but openapi.yaml didn't
        if git diff --name-only origin/main..HEAD | grep -q "^backend/"; then
          if ! git diff --name-only origin/main..HEAD | grep -q "^openapi.yaml$"; then
            echo "‚ùå Backend API files changed but openapi.yaml was not updated!"
            echo "Please update the OpenAPI specification to match your API changes."
            echo ""
            echo "Changed backend files:"
            git diff --name-only origin/main..HEAD | grep "^backend/" || true
            echo ""
            echo "To update the spec, run: python scripts/extract-openapi.py"
            exit 1
          fi
        fi
        
  generate-clients:
    name: Generate API Clients
    runs-on: ubuntu-latest
    needs: validate-openapi
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'
        
    - name: Install OpenAPI Generator
      run: |
        npm install -g @openapitools/openapi-generator-cli
        
    - name: Generate TypeScript client
      run: |
        openapi-generator-cli generate \
          -i openapi.yaml \
          -g typescript-fetch \
          -o /tmp/typescript-client \
          --additional-properties=typescriptThreePlus=true,supportsES6=true,npmName=@leadledderpro/api-client,npmVersion=1.0.0
          
    - name: Copy TypeScript client to frontend
      run: |
        mkdir -p frontend/src/lib
        cp /tmp/typescript-client/src/* frontend/src/lib/ 2>/dev/null || true
        # Create a consolidated api-client.ts file
        cat > frontend/src/lib/api-client.ts << 'EOF'
        // Auto-generated API client for LeadLedgerPro
        // Generated from OpenAPI specification
        
        import { Configuration, ConfigurationParameters } from './configuration';
        import { DefaultApi } from './apis/DefaultApi';
        
        export * from './apis';
        export * from './models';
        export { Configuration, ConfigurationParameters } from './configuration';
        
        /**
         * Create a configured API client instance
         */
        export function createApiClient(config?: ConfigurationParameters): DefaultApi {
          const configuration = new Configuration(config);
          return new DefaultApi(configuration);
        }
        
        /**
         * Default API client instance
         */
        export const apiClient = createApiClient({
          basePath: process.env.NEXT_PUBLIC_API_BASE || 'http://localhost:8000'
        });
        EOF
        
    - name: Generate Python client
      run: |
        openapi-generator-cli generate \
          -i openapi.yaml \
          -g python \
          -o /tmp/python-client \
          --additional-properties=packageName=leadledderpro_client,projectName=leadledderpro-client,packageVersion=1.0.0
          
    - name: Copy Python client to backend
      run: |
        mkdir -p backend/clients
        cp -r /tmp/python-client/leadledderpro_client backend/clients/ 2>/dev/null || true
        # Create a simplified client wrapper
        cat > backend/clients/__init__.py << 'EOF'
        """
        Auto-generated Python API client for LeadLedgerPro
        Generated from OpenAPI specification
        """
        
        try:
            from .leadledderpro_client import *
        except ImportError:
            # Fallback if generated client is not available
            pass
        EOF
        
    - name: Check for changes in generated clients
      id: check-changes
      run: |
        if [[ -n $(git status --porcelain frontend/src/lib/api-client.ts backend/clients/) ]]; then
          echo "changes=true" >> $GITHUB_OUTPUT
        else
          echo "changes=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Commit generated clients
      if: steps.check-changes.outputs.changes == 'true' && github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add frontend/src/lib/api-client.ts backend/clients/
        git commit -m "Auto-generate API clients from OpenAPI spec" || exit 0
        git push
        
    - name: Comment on PR with generation results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## ü§ñ OpenAPI Client Generation Results\n\n';
          comment += '‚úÖ OpenAPI specification validated successfully\n';
          
          // Replace strict equality with loose equality
          if ('${{ steps.check-changes.outputs.changes }}' == 'true') {
            comment += 'üìù Generated clients have changes - they will be updated when merged\n';
            comment += '\n**Generated files:**\n';
            comment += '- `frontend/src/lib/api-client.ts` - TypeScript client\n';
            comment += '- `backend/clients/` - Python client\n';
          } else {
            comment += '‚ú® Generated clients are up to date\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });