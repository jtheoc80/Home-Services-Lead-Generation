---
name: CI

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]
  deployment_status:
  workflow_dispatch:
    inputs:
      deployment_url:
        description: 'Deployment URL for E2E testing'
        required: false
        type: string

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Quick Build Verification Job
  quick-build:
    runs-on: ubuntu-latest
    name: Quick Build Verification
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

  # Bot Control Jobs
  audit:
    runs-on: ubuntu-latest
    name: QB Auditor Bot - Schema Audit
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run QB Auditor Bot
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: npm run audit:qb

      - name: Upload audit artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: schema-audit-results
          path: |
            schema-drift-migration.sql
            schema-drift-details.json

  db-wire:
    runs-on: ubuntu-latest
    name: DB Wire Bot - Database Health Check
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run DB Wire Bot
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: npm run db:wire

  e2e:
    runs-on: ubuntu-latest
    name: JT Smoke Bot - E2E Testing
    if: >
      (github.event_name == 'deployment_status' && github.event.deployment_status.state == 'success') ||
      github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Determine BASE_URL
        id: determine-url
        run: |
          if [ "${{ github.event_name }}" = "deployment_status" ]; then
            echo "BASE_URL=${{ github.event.deployment_status.target_url }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.deployment_url }}" ]; then
            echo "BASE_URL=${{ inputs.deployment_url }}" >> $GITHUB_OUTPUT
          else
            echo "BASE_URL=https://home-services-lead-generation.vercel.app" >> $GITHUB_OUTPUT
          fi

      - name: Run JT Smoke Bot
        env:
          BASE_URL: ${{ steps.determine-url.outputs.BASE_URL }}
          LEADS_TEST_MODE: true
        run: npm run e2e:jt -- --baseUrl "$BASE_URL"

      - name: Upload E2E test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            test-results/
            *.log

  # Existing Jobs
  python-ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run Python linting
        run: poetry run ruff check .

      - name: Run Python tests
        env:
          # Set minimal test environment
          SUPABASE_JWT_SECRET: test-secret-for-ci
        run: poetry run pytest -q --tb=short

      - name: Upload Python test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: python-test-results
          path: |
            test-results/
            *.log

  node-ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json

      - name: Install root dependencies
        run: npm ci

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Run frontend linting
        run: cd frontend && npm run lint

      - name: Run frontend type checking
        run: cd frontend && npm run type-check

      - name: Run frontend tests
        run: cd frontend && npm test

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: node-test-results
          path: |
            frontend/.next/
            frontend/test-results/
            *.log

  coverage:
    runs-on: ubuntu-latest
    needs: [python-ci, node-ci]
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction --with test

      - name: Run tests with coverage
        env:
          SUPABASE_JWT_SECRET: test-secret-for-ci
        run: |
          poetry run pytest --cov=permit_leads --cov=backend --cov-report=xml --cov-report=term-missing -q || true

      - name: Generate coverage summary
        run: |
          if [ -f coverage.xml ]; then
            echo "## Python Coverage Report" >> $GITHUB_STEP_SUMMARY
            python -c "
            import xml.etree.ElementTree as ET
            tree = ET.parse('coverage.xml')
            root = tree.getroot()
            coverage = root.get('line-rate', '0')
            coverage_pct = float(coverage) * 100
            print(f'Python code coverage: {coverage_pct:.1f}%')
            print(f'**Coverage: {coverage_pct:.1f}%**', file=open('coverage_summary.txt', 'w'))
            "
            cat coverage_summary.txt >> $GITHUB_STEP_SUMMARY
          else
            echo "No coverage data generated" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/
