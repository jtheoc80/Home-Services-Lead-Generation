---
name: Security Checks

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  codeql:
    name: CodeQL SAST Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'python']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Setup Node.js for JavaScript analysis
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Node.js dependencies
        if: matrix.language == 'javascript'
        run: |
          npm ci
          cd frontend && npm ci

      - name: Setup Python for Python analysis
        if: matrix.language == 'python'
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        if: matrix.language == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install -r permit_leads/requirements.txt

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  npm-audit:
    name: npm Vulnerability Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Run npm audit (root)
        run: |
          echo "Running npm audit for root dependencies..."
          npm audit --audit-level=moderate --omit=dev
          
      - name: Run npm audit (frontend)
        run: |
          echo "Running npm audit for frontend dependencies..."
          cd frontend
          npm audit --audit-level=moderate --omit=dev

  pip-audit:
    name: Python Vulnerability Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit --timeout=300

      - name: Audit backend dependencies
        run: |
          echo "Auditing backend Python dependencies..."
          pip-audit --requirement backend/requirements.txt --vulnerability-service=pypi --format=columns --timeout=300 || true

      - name: Audit permit_leads dependencies
        run: |
          echo "Auditing permit_leads Python dependencies..."
          pip-audit --requirement backend/requirements.txt --vulnerability-service=pypi --format=columns --timeout=300

      - name: Audit permit_leads dependencies
        run: |
          echo "Auditing permit_leads Python dependencies..."
          pip-audit --requirement permit_leads/requirements.txt --vulnerability-service=pypi --format=columns --timeout=300

  license-compliance:
    name: OSS License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install license checking tools
        run: |
          # Install Node.js license checker
          npm install -g license-checker
          
          # Install Python license checker
          python -m pip install --upgrade pip
          pip install pip-licenses

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: Check Node.js licenses (root)
        run: |
          echo "Checking licenses for root Node.js dependencies..."
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense;WTFPL;CC0-1.0;CC-BY-4.0;UNLICENSED;0BSD' --production --summary

      - name: Check Node.js licenses (frontend)
        run: |
          echo "Checking licenses for frontend Node.js dependencies..."
          cd frontend
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense;WTFPL;CC0-1.0;CC-BY-4.0;UNLICENSED;0BSD' --production --summary

      - name: Install Python dependencies and check licenses
        run: |
          # Create temporary virtual environment for backend dependencies
          python -m venv /tmp/backend_env
          source /tmp/backend_env/bin/activate
          pip install -r backend/requirements.txt
          echo "Checking licenses for backend Python dependencies..."
          pip-licenses --fail-on 'GPL-3.0;AGPL-3.0;LGPL-3.0' --format=table
          deactivate
          
          # Create temporary virtual environment for permit_leads dependencies  
          python -m venv /tmp/permit_env
          source /tmp/permit_env/bin/activate
          pip install -r permit_leads/requirements.txt
          echo "Checking licenses for permit_leads Python dependencies..."
          pip-licenses --fail-on 'GPL-3.0;AGPL-3.0;LGPL-3.0' --format=table
          deactivate

  security-summary:
    name: Security Check Summary
    runs-on: ubuntu-latest
    needs: [codeql, npm-audit, pip-audit, license-compliance]
    if: always()
    
    steps:
      - name: Check results
        run: |
          echo "Security check results:"
          echo "CodeQL: ${{ needs.codeql.result }}"
          echo "npm audit: ${{ needs.npm-audit.result }}"
          echo "pip-audit: ${{ needs.pip-audit.result }}"
          echo "License compliance: ${{ needs.license-compliance.result }}"
          
          if [[ "${{ needs.codeql.result }}" != "success" ]] || \
             [[ "${{ needs.npm-audit.result }}" != "success" ]] || \
             [[ "${{ needs.pip-audit.result }}" != "success" ]] || \
             [[ "${{ needs.license-compliance.result }}" != "success" ]]; then
            echo "One or more security checks failed!"
            exit 1
          fi
          
          echo "All security checks passed successfully!"