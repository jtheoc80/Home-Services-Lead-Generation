name: Auto Resolve JSON

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request Number'
        required: true
        type: number
      prefer:
        description: 'Version strategy: higher|ours|theirs'
        required: false
        default: 'higher'
        type: choice
        options:
          - higher
          - ours
          - theirs

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-resolve-json:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request && 
       contains(github.event.comment.body, '/resolve-json') &&
       contains(fromJSON('["OWNER", "MEMBER"]'), github.event.comment.author_association) &&
       !github.event.comment.user.bot) ||
      github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Resolve context and actor
        id: context
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            
            // Compute actor inside github-script as required
            const actor = (context.payload.comment && context.payload.comment.user && context.payload.comment.user.login)
              ? context.payload.comment.user.login
              : context.actor;
            
            // Determine PR number
            let prNumber;
            // Replace strict equality with loose equality
            if (context.eventName == 'workflow_dispatch') {
              prNumber = core.getInput('pr_number', { required: true });
            } else {
              prNumber = context.payload.issue.number;
            }
            
            core.setOutput('actor', actor);
            core.setOutput('pr_number', prNumber);

      - name: Get PR details
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ steps.context.outputs.pr_number }}
            });
            
            core.setOutput('base_ref', pr.base.ref);
            core.setOutput('head_ref', pr.head.ref);
            core.setOutput('head_sha', pr.head.sha);

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr-details.outputs.head_ref }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Enable corepack
        run: corepack enable

      - name: Install dependencies
        run: npm ci

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Attempt merge to surface conflicts
        id: merge-attempt
        run: |
          set +e  # Don't exit on error
          
          echo "Attempting no-commit merge of origin/${{ steps.pr-details.outputs.base_ref }}"
          git fetch origin ${{ steps.pr-details.outputs.base_ref }}
          git merge origin/${{ steps.pr-details.outputs.base_ref }} --no-commit --no-ff || true
          
          # Check if there are conflicts
          conflicts=$(git diff --name-only --diff-filter=U || echo "")
          if [ -n "$conflicts" ]; then
            echo "has_conflicts=true" >> $GITHUB_OUTPUT
            echo "Conflicts detected in:"
            echo "$conflicts"
          else
            echo "has_conflicts=false" >> $GITHUB_OUTPUT
            echo "No conflicts detected"
          fi

      - name: Resolve prefer strategy
        id: strategy
        run: |
          # Do the fallback to 'higher' in shell, not in ${{ }}
          prefer="${{ inputs.prefer }}"
          if [ -z "$prefer" ]; then
            prefer="higher"
          fi
          echo "prefer=$prefer" >> $GITHUB_OUTPUT

      - name: Run JSON conflict resolution
        if: steps.merge-attempt.outputs.has_conflicts == 'true'
        run: |
          echo "Running JSON conflict resolution with strategy: ${{ steps.strategy.outputs.prefer }}"
          npx tsx tools/bots/jsonResolve.ts --prefer=${{ steps.strategy.outputs.prefer }}

      - name: Check for changes
        id: changes
        run: |
          if git diff --cached --quiet && git diff --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes to commit"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected"
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git add .
          git commit -m "auto: resolve JSON/package lock conflicts"
          git push origin ${{ steps.pr-details.outputs.head_ref }}
          echo "âœ… Changes committed and pushed successfully"

      - name: Post summary comment
        uses: actions/github-script@v7
        with:
          script: |
            // Replace strict equality with loose equality
            const hasConflicts = '${{ steps.merge-attempt.outputs.has_conflicts }}' == 'true';
            const hasChanges = '${{ steps.changes.outputs.has_changes }}' == 'true';
            const actor = '${{ steps.context.outputs.actor }}';
            const strategy = '${{ steps.strategy.outputs.prefer }}';
            
            let message = 'ðŸ¤– **Auto-resolve JSON completed**\n\n';
            
            if (!hasConflicts) {
              message += 'âœ… **Result**: No conflicts detected - clean merge possible\n';
            } else if (hasChanges) {
              message += 'âœ… **Result**: JSON/package lock conflicts resolved\n';
              message += `ðŸ“‹ **Strategy**: ${strategy}\n`;
              message += 'ðŸ”§ **Action**: Changes committed and pushed\n';
            } else {
              message += 'âœ… **Result**: JSON conflicts resolved (no changes needed)\n';
              message += `ðŸ“‹ **Strategy**: ${strategy}\n`;
            }
            
            message += `\n_Triggered by: @${actor}_`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.context.outputs.pr_number }},
              body: message
            });