---
name: Source Health
on:
  schedule: [{cron: "15 * * * *"}]
  workflow_dispatch: {}

jobs:
  probe:
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      AUSTIN_SOCRATA_APP_TOKEN: ${{ secrets.AUSTIN_SOCRATA_APP_TOKEN }}
      SA_SOCRATA_APP_TOKEN: ${{ secrets.SA_SOCRATA_APP_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: {node-version: '20', cache: 'npm'}
      - run: npm ci
      - name: Probe sources
        run: npx tsx scripts/probeSources.ts
      - name: Health summary
        env:
          PGPASSWORD: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "### Source Health" >> $GITHUB_STEP_SUMMARY

          # Extract connection details from SUPABASE_URL
          # Extract host from SUPABASE_URL
          DB_HOST=$(echo "$SUPABASE_URL" | awk -F[/:] '{print $4}')
          # If host ends with .supabase.co, convert to .postgres.supabase.co
          if [[ "$DB_HOST" =~ ^([^.]+)\.supabase\.co$ ]]; then
            DB_HOST="${BASH_REMATCH[1]}.postgres.supabase.co"
          fi
          DB_NAME="postgres"
          DB_USER="postgres"
          DB_PORT="5432"

          # Query health data and format for GitHub
          psql -h "$DB_HOST" -p "$DB_PORT" -d "$DB_NAME" -U "$DB_USER" \
            -t -A -F'|' \
            -c "SELECT source_key, status, last_check, response_time_ms, \
                error_message, records_available \
                FROM public.source_health_latest ORDER BY source_key;" \
            2>/dev/null | while IFS='|' read -r source status check_time \
              response_time error records; do
              if [ -n "$source" ]; then
                case "$status" in
                  "online") emoji="✅" ;;
                  "limited") emoji="⚠️" ;;
                  "offline") emoji="❌" ;;
                  *) emoji="❓" ;;
                esac
                echo "- $emoji **$source**: $status (${response_time}ms) - $records records" >> $GITHUB_STEP_SUMMARY
                if [ -n "$error" ] && [ "$error" != "" ]; then
                  echo "  - Error: $error" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            done || echo "Unable to connect to database for health summary" \
              >> $GITHUB_STEP_SUMMARY