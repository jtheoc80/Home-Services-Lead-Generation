---
name: Source Health
on:
  schedule: [{cron: "15 * * * *"}]
  workflow_dispatch: {}

jobs:
  probe:
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      AUSTIN_SOCRATA_APP_TOKEN: ${{ secrets.AUSTIN_SOCRATA_APP_TOKEN }}
      SA_SOCRATA_APP_TOKEN: ${{ secrets.SA_SOCRATA_APP_TOKEN }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with: {node-version: '20', cache: 'npm'}
      - run: npm ci
      
      - name: Sanity check required env
        run: |
          set -euo pipefail
          missing=0
          for v in SUPABASE_URL SUPABASE_SERVICE_ROLE_KEY USER_AGENT; do
            if [ -z "${!v:-}" ]; then echo "MISSING $v"; missing=1; fi
          done
          # Add city-specific vars below (uncomment what applies)
          # Dallas
          # for v in DALLAS_ARCGIS_URL; do [ -z "${!v:-}" ] && echo "MISSING $v" && missing=1; done
          # Austin
          for v in AUSTIN_SODA_APP_TOKEN AUSTIN_DATASET_ID; do [ -z "${!v:-}" ] && echo "MISSING $v" && missing=1; done
          # San Antonio
          for v in SANANTONIO_SODA_APP_TOKEN SAN_ANTONIO_DATASET_ID; do [ -z "${!v:-}" ] && echo "MISSING $v" && missing=1; done
          # Houston
          # for v in HOUSTON_WEEKLY_URL HOUSTON_SOLD_URL; do [ -z "${!v:-}" ] && echo "MISSING $v" && missing=1; done
          exit $missing
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          USER_AGENT: ${{ secrets.USER_AGENT || 'LeadLedgerETL/1.0' }}
          AUSTIN_SODA_APP_TOKEN: ${{ secrets.AUSTIN_SOCRATA_APP_TOKEN }}
          AUSTIN_DATASET_ID: ${{ vars.AUSTIN_DATASET_ID || secrets.AUSTIN_DATASET_ID }}
          SANANTONIO_SODA_APP_TOKEN: ${{ secrets.SA_SOCRATA_APP_TOKEN }}
          SAN_ANTONIO_DATASET_ID: ${{ vars.SAN_ANTONIO_DATASET_ID || secrets.SAN_ANTONIO_DATASET_ID }}

      - name: Preflight connectivity
        run: |
          set -euxo pipefail
          # Un-comment the checks you need. We print only the status line.
          # Dallas ArcGIS:
          # curl -sS --get "${DALLAS_ARCGIS_URL}" \
          #   --data-urlencode 'where=1=1' \
          #   --data-urlencode 'outFields=*' \
          #   --data-urlencode 'resultRecordCount=1' \
          #   --data-urlencode 'f=json' | head -c 200 | tr -d '\n' && echo

          # Austin Socrata:
          curl -sS -H "X-App-Token: ${AUSTIN_SODA_APP_TOKEN}" \
            "https://data.austintexas.gov/resource/${AUSTIN_DATASET_ID}.json?\$limit=1" | head -c 200 | tr -d '\n' && echo

          # San Antonio Socrata:
          curl -sS -H "X-App-Token: ${SANANTONIO_SODA_APP_TOKEN}" \
            "https://data.sanantonio.gov/resource/${SAN_ANTONIO_DATASET_ID}.json?\$limit=1" | head -c 200 | tr -d '\n' && echo

          # Houston weekly/sold landing pages:
          # curl -sS -I "${HOUSTON_WEEKLY_URL}" | head -n1
          # curl -sS -I "${HOUSTON_SOLD_URL}"   | head -n1
        env:
          AUSTIN_SODA_APP_TOKEN: ${{ secrets.AUSTIN_SOCRATA_APP_TOKEN }}
          AUSTIN_DATASET_ID: ${{ vars.AUSTIN_DATASET_ID || secrets.AUSTIN_DATASET_ID }}
          SANANTONIO_SODA_APP_TOKEN: ${{ secrets.SA_SOCRATA_APP_TOKEN }}
          SAN_ANTONIO_DATASET_ID: ${{ vars.SAN_ANTONIO_DATASET_ID || secrets.SAN_ANTONIO_DATASET_ID }}
          
      - name: Probe sources
        run: npx tsx scripts/probeSources.ts
      - name: Health summary
        env:
          PGPASSWORD: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "### Source Health" >> $GITHUB_STEP_SUMMARY

          # Extract connection details from SUPABASE_URL
          # Extract host from SUPABASE_URL
          DB_HOST=$(echo "$SUPABASE_URL" | awk -F[/:] '{print $4}')
          # If host ends with .supabase.co, convert to .postgres.supabase.co
          if [[ "$DB_HOST" =~ ^([^.]+)\.supabase\.co$ ]]; then
            DB_HOST="${BASH_REMATCH[1]}.postgres.supabase.co"
          fi
          DB_NAME="postgres"
          DB_USER="postgres"
          DB_PORT="5432"

          # Query health data and format for GitHub
          psql -h "$DB_HOST" -p "$DB_PORT" -d "$DB_NAME" -U "$DB_USER" \
            -t -A -F'|' \
            -c "SELECT source_key, status, last_check, response_time_ms, \
                error_message, records_available \
                FROM public.source_health_latest ORDER BY source_key;" \
            2>/dev/null | while IFS='|' read -r source status check_time \
              response_time error records; do
              if [ -n "$source" ]; then
                case "$status" in
                  "online") emoji="✅" ;;
                  "limited") emoji="⚠️" ;;
                  "offline") emoji="❌" ;;
                  *) emoji="❓" ;;
                esac
                echo "- $emoji **$source**: $status (${response_time}ms) - $records records" >> $GITHUB_STEP_SUMMARY
                if [ -n "$error" ] && [ "$error" != "" ]; then
                  echo "  - Error: $error" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            done || echo "Unable to connect to database for health summary" \
              >> $GITHUB_STEP_SUMMARY