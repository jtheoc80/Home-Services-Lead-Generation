
name: Ingest Agents (Austin/Dallas)

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode (no actual data insertion)'
        required: false
        default: 'false'
        type: boolean
  
  # Scheduled trigger (every 6 hours)
  schedule:
    - cron: "0 */6 * * *"   # every 6 hours

env:
  VERCEL_DOMAIN: ${{ secrets.VERCEL_DOMAIN }}
  CRON_SECRET: ${{ secrets.CRON_SECRET }}

jobs:
  ingest:
    runs-on: ubuntu-latest

    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        source: [austin, dallas, houston, san_antonio]
    
    steps:
    - name: Validate environment
      run: |
        if [ -z "${{ env.CRON_SECRET }}" ]; then
          echo "❌ CRON_SECRET secret not configured"
          exit 1
        fi
        if [ -z "${{ env.VERCEL_DOMAIN }}" ]; then
          echo "❌ VERCEL_DOMAIN secret not configured"
          exit 1
        fi
        echo "✅ Environment validated for source: ${{ matrix.source }}"
        
    - name: Trigger permit ingestion for ${{ matrix.source }}
      id: ingest
      run: |
        SOURCE="${{ matrix.source }}"
        DRY_RUN="${{ github.event.inputs.dry_run || 'false' }}"
        
        echo "🚀 Triggering permit ingestion for source: $SOURCE"
        echo "🧪 Dry run mode: $DRY_RUN"
        echo "📡 Target: https://${{ env.VERCEL_DOMAIN }}/api/permits/permits/ingest"
        
        # Prepare URL with query parameters
        URL="https://${{ env.VERCEL_DOMAIN }}/api/permits/permits/ingest?source=$SOURCE"
        if [ "$DRY_RUN" == "true" ]; then
          URL="$URL&dry=1"
        fi
        
        echo "📞 Making request to: $URL"
        
        # Make the API call to the permits ingest endpoint
        RESPONSE=$(curl -s -w "\n%{http_code}" \
          -X POST \
          -H "Content-Type: application/json" \
          -H "x-cron-secret: ${{ env.CRON_SECRET }}" \
          "$URL")
        
        # Extract status code from response
        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
        RESPONSE_BODY=$(echo "$RESPONSE" | head -n -1)
        
        echo "📊 HTTP Status: $HTTP_STATUS"
        echo "📋 Response:"
        echo "$RESPONSE_BODY" | jq '.' 2>/dev/null || echo "$RESPONSE_BODY"
        
        # Check if successful
        if [ "$HTTP_STATUS" -eq 200 ]; then
          echo "✅ Permit ingestion completed successfully for $SOURCE"
          
          # Extract summary information if available
          FETCHED=$(echo "$RESPONSE_BODY" | jq -r '.fetched // "N/A"' 2>/dev/null)
          UPSERTS=$(echo "$RESPONSE_BODY" | jq -r '.upserts // "N/A"' 2>/dev/null)
          BEFORE_COUNT=$(echo "$RESPONSE_BODY" | jq -r '.beforeCount // "N/A"' 2>/dev/null)
          AFTER_COUNT=$(echo "$RESPONSE_BODY" | jq -r '.afterCount // "N/A"' 2>/dev/null)
          ERRORS=$(echo "$RESPONSE_BODY" | jq -r '.errors | length // 0' 2>/dev/null)
          
          echo "summary_fetched=$FETCHED" >> $GITHUB_OUTPUT
          echo "summary_upserts=$UPSERTS" >> $GITHUB_OUTPUT
          echo "summary_before_count=$BEFORE_COUNT" >> $GITHUB_OUTPUT
          echo "summary_after_count=$AFTER_COUNT" >> $GITHUB_OUTPUT
          echo "summary_errors=$ERRORS" >> $GITHUB_OUTPUT
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Permit ingestion failed for $SOURCE with status: $HTTP_STATUS"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
      
    - name: Step Summary for ${{ matrix.source }}
      if: always()
      run: |
        echo "## Ingest Summary: ${{ matrix.source }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Source**: ${{ matrix.source }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Dry Run**: ${{ github.event.inputs.dry_run || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ steps.ingest.outputs.success == 'true' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.ingest.outputs.success }}" == "true" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Fetched**: ${{ steps.ingest.outputs.summary_fetched }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Upserts**: ${{ steps.ingest.outputs.summary_upserts }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Before Count**: ${{ steps.ingest.outputs.summary_before_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **After Count**: ${{ steps.ingest.outputs.summary_after_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Errors**: ${{ steps.ingest.outputs.summary_errors }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 [View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        source: [austin, dallas]
    steps:
      - name: Validate environment
        run: |
          if [ -z "$INGEST_URL" ]; then
            echo "::error::INGEST_URL secret not configured"
            exit 1
          fi
          if [ -z "$CRON_SECRET" ]; then
            echo "::error::CRON_SECRET secret not configured"
            exit 1
          fi
          echo "✅ Environment validated for ${{ matrix.source }}"
        env:
          INGEST_URL: ${{ secrets.INGEST_URL }}
          CRON_SECRET: ${{ secrets.CRON_SECRET }}

      - name: Dry run ${{ matrix.source }}
        id: dry
        run: |
          set -e
          RESP=$(curl -sS -X POST "$INGEST_URL?source=${{ matrix.source }}&dry=1" \
            -H "x-cron-secret: $CRON_SECRET")
          echo "$RESP"
          echo "resp=$RESP" >> $GITHUB_OUTPUT
          FETCHED=$(jq -r '.fetched // 0' <<< "$RESP")
          if [ "$FETCHED" -eq 0 ]; then
            echo "::warning::Fetched=0 for ${{ matrix.source }} (check dataset/token)"
          fi
        env:
          INGEST_URL: ${{ secrets.INGEST_URL }}
          CRON_SECRET: ${{ secrets.CRON_SECRET }}

      - name: Real ingest ${{ matrix.source }}
        id: real
        run: |
          set -e
          RESP=$(curl -sS -X POST "$INGEST_URL?source=${{ matrix.source }}" \
            -H "x-cron-secret: $CRON_SECRET")
          echo "$RESP"
          echo "resp=$RESP" >> $GITHUB_OUTPUT
          UPSERTS=$(jq -r '.upserts // 0' <<< "$RESP")
          if [ "$UPSERTS" -eq 0 ]; then
            echo "::warning::Upserts=0 for ${{ matrix.source }} (maybe all deduped?)"
          fi
        env:
          INGEST_URL: ${{ secrets.INGEST_URL }}
          CRON_SECRET: ${{ secrets.CRON_SECRET }}

  verify:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: ingest
    steps:
      - name: Validate environment
        run: |
          if [ -z "$DEBUG_URL" ]; then
            echo "::error::DEBUG_URL secret not configured"
            exit 1
          fi
          echo "✅ Environment validated for verification"
        env:
          DEBUG_URL: ${{ secrets.DEBUG_URL }}

      - name: Check Supabase counts
        id: check
        run: |
          set -e
          RESP=$(curl -sS "$DEBUG_URL")
          echo "$RESP"
          echo "resp=$RESP" >> $GITHUB_OUTPUT
          OK=$(jq -r '.ok' <<< "$RESP")
          LEADS=$(jq -r '.leads // 0' <<< "$RESP")
          PERMITS=$(jq -r '.permits // 0' <<< "$RESP")
          if [ "$OK" != "true" ]; then
            echo "::error::Debug endpoint failed"; exit 1
          fi
          echo "Leads=$LEADS, Permits=$PERMITS"
        env:
          DEBUG_URL: ${{ secrets.DEBUG_URL }}

      - name: Summarize
        run: echo "✅ Verification complete"

  # Add GitHub Agent invocation after successful ingestion
  gh-agent:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: verify
    if: success()
    steps:
      - name: Invoke GitHub Agent
        id: agent
        run: |
          # Only invoke if GitHub Agent secrets are configured
          if [ -n "$SUPABASE_FUNCTION_URL" ] && [ -n "$AGENT_SECRET" ]; then
            echo "🤖 Invoking GitHub Agent to process DB events..."
            
            RESP=$(curl -sS -X POST "$SUPABASE_FUNCTION_URL" \
              -H "Content-Type: application/json" \
              -H "x-agent-secret: $AGENT_SECRET" \
              -w "\nHTTP_STATUS:%{http_code}" || echo "CURL_FAILED")
            
            if [ "$RESP" = "CURL_FAILED" ]; then
              echo "⚠️ GitHub Agent invocation failed (network error)"
              echo "This is non-critical - events will be processed on next run"
              exit 0
            fi
            
            # Extract HTTP status and response body
            HTTP_STATUS=$(echo "$RESP" | grep "HTTP_STATUS:" | cut -d: -f2 2>/dev/null || echo "000")
            BODY=$(echo "$RESP" | sed '/HTTP_STATUS:/d')
            
            echo "Response: $BODY"
            
            if [ "$HTTP_STATUS" -eq 200 ] || [ "$HTTP_STATUS" -eq 207 ]; then
              PROCESSED=$(echo "$BODY" | jq -r '.processed // 0' 2>/dev/null || echo "0")
              echo "✅ GitHub Agent processed $PROCESSED events"
            else
              echo "⚠️ GitHub Agent returned HTTP $HTTP_STATUS (non-critical)"
            fi
          else
            echo "ℹ️ GitHub Agent not configured (SUPABASE_FUNCTION_URL/AGENT_SECRET missing)"
            echo "This is optional - skipping GitHub Agent invocation"
          fi
        env:
          SUPABASE_FUNCTION_URL: ${{ secrets.SUPABASE_FUNCTION_URL }}
          AGENT_SECRET: ${{ secrets.AGENT_SECRET }}
        continue-on-error: true

      - name: Workflow Summary
        if: always()
        run: |
          echo "## Ingest Agents Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Sources:** austin, dallas (parallel execution)" >> $GITHUB_STEP_SUMMARY
          echo "- **Schedule:** Every 6 hours" >> $GITHUB_STEP_SUMMARY
          echo "- **Verification:** ${{ steps.check.outcome == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

