name: Ingest Agents (Austin/Dallas Minimal)

on:
  # Scheduled trigger (every 6 hours)
  schedule:
    - cron: "0 */6 * * *"   # every 6 hours
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode (no actual data insertion)'
        required: false
        default: 'false'
        type: boolean

jobs:
  ingest:
    runs-on: [self-hosted, linux, x64, scrape]
    
    concurrency:
      group: ${{ github.workflow }}-${{ matrix.source }}-${{ github.ref }}
      cancel-in-progress: true
    timeout-minutes: 15
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        source: [austin, dallas]
    steps:
      - name: Create output directories
        run: |
          mkdir -p logs artifacts
          
      - name: "Preflight: verify required secrets"
        id: preflight
        shell: bash
        env:
          INGEST_URL: ${{ secrets.INGEST_URL }}
          CRON_SECRET: ${{ secrets.CRON_SECRET }}
          DEBUG_URL: ${{ secrets.DEBUG_URL }}
        run: |
          ok=1
          for v in INGEST_URL CRON_SECRET DEBUG_URL; do
            val="${!v}"
            if [ -z "$val" ]; then
              echo "::error title=$v missing::Set $v in GitHub → Settings → Secrets and variables → Actions"
              ok=0
            else
              echo "::add-mask::$val"
            fi
          done
          echo "ok=$ok" >> "$GITHUB_OUTPUT"
          [ "$ok" -eq 1 ]

      - name: Dry run ${{ matrix.source }}
        id: dry
        env:
          INGEST_URL: ${{ secrets.INGEST_URL }}
          CRON_SECRET: ${{ secrets.CRON_SECRET }}
        run: |
          set -e
          echo "🧪 Starting dry run for ${{ matrix.source }}" | tee -a logs/etl_output.log
          RESP=$(curl -sS -X POST "$INGEST_URL?source=${{ matrix.source }}&dry=1" \
            -H "x-cron-secret: $CRON_SECRET")
          echo "$RESP" | tee -a logs/etl_output.log
          echo "resp=$RESP" >> $GITHUB_OUTPUT
          FETCHED=$(jq -r '.fetched // 0' <<< "$RESP")
          if [ "$FETCHED" -eq 0 ]; then
            echo "::warning::Fetched=0 for ${{ matrix.source }} (check dataset/token)" | tee -a logs/etl_output.log
          fi

      - name: Real ingest ${{ matrix.source }}
        id: real
        run: |
          set -e
          echo "🚀 Starting real ingest for ${{ matrix.source }}" | tee -a logs/etl_output.log
          RESP=$(curl -sS -X POST "$INGEST_URL?source=${{ matrix.source }}" \
            -H "x-cron-secret: $CRON_SECRET")
          echo "$RESP" | tee -a logs/etl_output.log
          echo "resp=$RESP" >> $GITHUB_OUTPUT
          UPSERTS=$(jq -r '.upserts // 0' <<< "$RESP")
          if [ "$UPSERTS" -eq 0 ]; then
            echo "::warning::Upserts=0 for ${{ matrix.source }} (maybe all deduped?)" | tee -a logs/etl_output.log
          fi
        env:
          INGEST_URL: ${{ secrets.INGEST_URL }}
          CRON_SECRET: ${{ secrets.CRON_SECRET }}

      - name: Upload ETL logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: etl-logs-${{ github.job }}-${{ matrix.source }}-${{ github.run_id }}
          path: |
            logs/**/*.log
            artifacts/**/*
          if-no-files-found: warn

  verify:
    runs-on: [self-hosted, linux, x64, scrape]
    timeout-minutes: 10
    needs: ingest
    steps:
      - name: Create output directories
        run: |
          mkdir -p logs artifacts
          
      - name: "Preflight: verify required secrets"
        id: preflight
        shell: bash
        env:
          DEBUG_URL: ${{ secrets.DEBUG_URL }}
        run: |
          ok=1
          for v in DEBUG_URL; do
            val="${!v}"
            if [ -z "$val" ]; then
              echo "::error title=$v missing::Set $v in GitHub → Settings → Secrets and variables → Actions"
              ok=0
            else
              echo "::add-mask::$val"
            fi
          done
          echo "ok=$ok" >> "$GITHUB_OUTPUT"
          [ "$ok" -eq 1 ]

      - name: Check Supabase counts
        id: check
        env:
          DEBUG_URL: ${{ secrets.DEBUG_URL }}
        run: |
          set -e
          echo "🔍 Checking Supabase counts..." | tee -a logs/etl_output.log
          RESP=$(curl -sS "$DEBUG_URL")
          echo "$RESP" | tee -a logs/etl_output.log
          echo "resp=$RESP" >> $GITHUB_OUTPUT
          OK=$(jq -r '.ok' <<< "$RESP")
          LEADS=$(jq -r '.leads // 0' <<< "$RESP")
          PERMITS=$(jq -r '.permits // 0' <<< "$RESP")
          if [ "$OK" != "true" ]; then
            echo "::error::Debug endpoint failed"; exit 1
          fi
          echo "Leads=$LEADS, Permits=$PERMITS" | tee -a logs/etl_output.log

      - name: Summarize
        run: echo "✅ Verification complete" | tee -a logs/etl_output.log

      - name: Upload ETL logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: etl-logs-${{ github.job }}-${{ github.run_id }}
          path: |
            logs/**/*.log
            artifacts/**/*
          if-no-files-found: warn

  # Add GitHub Agent invocation after successful ingestion
  gh-agent:
    runs-on: [self-hosted, linux, x64, scrape]
    timeout-minutes: 5
    needs: verify
    if: success()
    steps:
      - name: Create output directories
        run: |
          mkdir -p logs artifacts
          
      - name: Invoke GitHub Agent
        id: agent
        run: |
          # Only invoke if GitHub Agent secrets are configured
          if [ -n "$SUPABASE_FUNCTION_URL" ] && [ -n "$AGENT_SECRET" ]; then
            echo "🤖 Invoking GitHub Agent to process DB events..." | tee -a logs/etl_output.log
            
            RESP=$(curl -sS -X POST "$SUPABASE_FUNCTION_URL" \
              -H "Content-Type: application/json" \
              -H "x-agent-secret: $AGENT_SECRET" \
              -w "\nHTTP_STATUS:%{http_code}" || echo "CURL_FAILED")
            
            if [ "$RESP" = "CURL_FAILED" ]; then
              echo "⚠️ GitHub Agent invocation failed (network error)" | tee -a logs/etl_output.log
              echo "This is non-critical - events will be processed on next run" | tee -a logs/etl_output.log
              exit 0
            fi
            
            # Extract HTTP status and response body
            HTTP_STATUS=$(echo "$RESP" | grep "HTTP_STATUS:" | cut -d: -f2 2>/dev/null || echo "000")
            BODY=$(echo "$RESP" | sed '/HTTP_STATUS:/d')
            
            echo "Response: $BODY" | tee -a logs/etl_output.log
            
            if [ "$HTTP_STATUS" -eq 200 ] || [ "$HTTP_STATUS" -eq 207 ]; then
              PROCESSED=$(echo "$BODY" | jq -r '.processed // 0' 2>/dev/null || echo "0")
              echo "✅ GitHub Agent processed $PROCESSED events" | tee -a logs/etl_output.log
            else
              echo "⚠️ GitHub Agent returned HTTP $HTTP_STATUS (non-critical)" | tee -a logs/etl_output.log
            fi
          else
            echo "ℹ️ GitHub Agent not configured (SUPABASE_FUNCTION_URL/AGENT_SECRET missing)" | tee -a logs/etl_output.log
            echo "This is optional - skipping GitHub Agent invocation" | tee -a logs/etl_output.log
          fi
        env:
          SUPABASE_FUNCTION_URL: ${{ secrets.SUPABASE_FUNCTION_URL }}
          AGENT_SECRET: ${{ secrets.AGENT_SECRET }}
        continue-on-error: true

      - name: Workflow Summary
        if: always()
        run: |
          # Determine verification status with shell conditional
          if [ "${{ needs.verify.result }}" == "success" ]; then
            VERIFICATION_STATUS="✅ Passed"
          else
            VERIFICATION_STATUS="❌ Failed"
          fi
          
          echo "## Ingest Agents Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Sources:** austin, dallas (parallel execution)" >> $GITHUB_STEP_SUMMARY
          echo "- **Schedule:** Every 6 hours" >> $GITHUB_STEP_SUMMARY
          echo "- **Verification:** $VERIFICATION_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      - name: Upload ETL logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: etl-logs-${{ github.job }}-${{ github.run_id }}
          path: |
            logs/**/*.log
            artifacts/**/*
          if-no-files-found: warn